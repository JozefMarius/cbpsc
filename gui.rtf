{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;\red96\green96\blue96;}
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs18 \cf2 //This file is part of cbpsc (version 0.1.1).\cf3 \
\cf2 //\cf3 \
\cf2 //cbpsc is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\cf3 \
\cf2 //\cf3 \
\cf2 //cbpsc is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\cf3 \
\cf2 //\cf3 \
\cf2 //You should have received a copy of the GNU General Public License along with cbpsc.  If not, see <http://www.gnu.org/licenses/>.\cf3 \
\cf2 //\cf3 \
\cf2 // cbpsc : created by Tom Stoll : tms@corpora-sonorus.com : www.corpora-sonorus.com\cf3 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf2 //\cf3 \
(\
~newSoundFileUnitRow = \{ \cf4 |currfile, pid, parent, top, bot|\cf3 \
	\cf4 var\cf3  currSFU = ~crps[\cf5 \\sfutable\cf3 ][currfile];\
	[ \cf4 SCButton\cf3 .new(parent, \cf4 Rect\cf3 (0, (pid * 25), 22, 22))\
			.states_([[pid.asString, \cf4 Color\cf3 .blue, \cf4 Color\cf3 .white], [pid.asString, \cf4 Color\cf3 .white, \cf4 Color\cf3 .blue]])\
			.value_(0)\
			.mouseUpAction_(\{ \cf4 |bttn|\cf3 \
				~updateSFViews.value(currfile, top, bot, pid);\
				\cf4 Plotter\cf3 (parent: ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\highlighter\cf3 ])\
					.value_(currSFU[\cf5 \\mfccs\cf3 ][pid][6..].ampdb)\
\pard\pardeftab560\ql\qnatural
\cf3 					.plotMode_(\cf5 \\plines\cf3 )\
					.findSpecs_(\cf4 true\cf3 );\
			\}),\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 		\cf4 SCButton\cf3 .new(parent, \cf4 Rect\cf3 (25, (pid * 25), 22, 22))\
			.states_([[\cf6 "X"\cf3 , \cf4 Color\cf3 .white, \cf4 Color\cf3 .red]])\
			.value_(0)\
			.mouseUpAction_(\{ \cf4 |num|\cf3  \cf4 AppClock\cf3 .sched(0, \{\cf4 |now|\cf3  ~deleteSoundFileUnit.value(pid, top, bot); \cf4 nil\cf3 \}) \}),\
		\cf4 SCButton\cf3 .new(parent, \cf4 Rect\cf3 (50, (pid * 25), 22, 22))\
			.states_([[\cf6 "P"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .green]])\
			.value_(0)\
			.mouseUpAction_(\{ ~playSegment.value([currfile, pid]) \}),\
\pard\pardeftab560\ql\qnatural
\cf3 		\cf4 SCNumberBox\cf3 .new(parent, \cf4 Rect\cf3 (75, (pid * 25), 60, 20))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 			.value_(currSFU[\cf5 \\units\cf3 ][pid][4])\
			.action_(\{\cf4 |val|\cf3  \cf2 // "ONSET VAL: ".post; val.value.postln;\cf3 \
				~crps.updateSoundFileUnit(currfile, pid, \cf4 nil\cf3 , val.value.floor);\
				~crps.segmentUnits(currfile);\
				~updateSFViews.value(currfile, top, bot, pid);\
\cf2 //				~updateCurrentSoundFileUnit.value(pid,1);\cf3 \
				~gui[\cf5 \\soundFileUnitRowViews\cf3 ][pid][5].value_(currSFU[\cf5 \\units\cf3 ][pid][0..16].asString);\
			\}),\
		\cf4 SCNumberBox\cf3 .new(parent, \cf4 Rect\cf3 (140, (pid * 25), 60, 20))\
			.value_(currSFU[\cf5 \\units\cf3 ][pid][5])\
			.action_(\{\cf4 |val|\cf3  \cf2 // "DUR VAL: ".post; val.value.postln;\cf3 \
				~crps.updateSoundFileUnit(currfile, pid, \cf4 nil\cf3 , \cf4 nil\cf3 , val.value.ceil);\
				~crps.segmentUnits(currfile);\
				~updateSFViews.value(currfile, top, bot, pid);\
\cf2 //				~updateCurrentSoundFileUnit.value(pid,1);\cf3 \
				~gui[\cf5 \\soundFileUnitRowViews\cf3 ][pid][5].value_(currSFU[\cf5 \\units\cf3 ][pid][0..16].asString);\
			\}),\
		\cf4 SCTextField\cf3 .new(parent, \cf4 Rect\cf3 (205, (pid * 25), 700, 20))\
			.value_(currSFU[\cf5 \\units\cf3 ][pid][0..16].asString), \cf2 //((++ ~crps[\\sfutable][currfile][\\units][pid][5..15]).asString),\cf3 \
		pid.asInteger ];\
\};\
\
~updateSoundFileUnitRow = \{ \cf4 |rid, bot|\cf3 \
	[rid, bot].postln;\
	~gui[\cf5 \\soundFileUnitRowViews\cf3 ][rid][3].value_(~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ][rid][4]); \cf2 ////!!!!!!!!!\cf3 \
	~gui[\cf5 \\soundFileUnitRowViews\cf3 ][rid][4].value_(~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ][rid][5]);\
	bot.setSelection(rid, [0, 0]);\
	bot.setSelection(rid, ~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ][rid][4..5] * 44.1);\
	\cf2 //"Row ".post; rid.post; " updated.".postln;\cf3 \
\};\
\
~updateSFViews = \{ \cf4 |cfpath, top, bot, currid|\cf3 \
	\cf4 var\cf3  theunits = ~crps[\cf5 \\sfutable\cf3 ][cfpath][\cf5 \\units\cf3 ];\
	theunits.postln;\
	\cf2 // clear Views\cf3 \
	(0..63).do(\{ \cf4 |i|\cf3  top.selectNone(i) \});\
	bot.selectNone(0);\
	\cf2 // read out units into the two views if they exist\cf3 \
	(theunits != \cf4 nil\cf3 ).if\
	\{\
		theunits.do(\{ \cf4 |row, index|\cf3  top.setSelection(index, [row[4], row[5]] * 44.1) \});\
		bot.setSelection(0, (theunits[currid][4..5] * 44.1));\
		\cf2 //unselect\cf3 \
		(~gui[\cf5 \\soundFileUnitRowViews\cf3 ][~gui[\cf5 \\cp\cf3 ]] != \cf4 nil\cf3 ).if \{ ~gui[\cf5 \\soundFileUnitRowViews\cf3 ][~gui[\cf5 \\cp\cf3 ]][0].value_(0)\};\
		\cf2 //update\cf3 \
		~gui[\cf5 \\cp\cf3 ] = currid;\
		~gui[\cf5 \\soundFileUnitRowViews\cf3 ][~gui[\cf5 \\cp\cf3 ]][0].value_(0);\
		\cf2 //~updateCurrentSoundFileUnit.value(currid,1);\cf3 \
	\};\
\};\
\
~updateCurrentSoundFileUnit = \{ \cf4 |cpuid|\cf3 \
	\cf2 //unselect\cf3 \
	~gui[\cf5 \\soundFileUnitRowViews\cf3 ][~gui[\cf5 \\cp\cf3 ]][0].value_(0);\
	\cf2 //update\cf3 \
	~gui[\cf5 \\cp\cf3 ] = cpuid;\
	~gui[\cf5 \\soundFileUnitRowViews\cf3 ][~gui[\cf5 \\cp\cf3 ]][0].value_(0);\
\};\
\
~deleteSoundFileUnit = \{ \cf4 |did, top, bot|\cf3 \
	\cf4 var\cf3  range, num = ~gui[\cf5 \\soundFileUnitRowViews\cf3 ][did].pop;\
	~gui[\cf5 \\soundFileUnitRowViews\cf3 ][did].do(\{\cf4 |item|\cf3  item.remove; item.free \});\
	top.setSelection(~gui[\cf5 \\cp\cf3 ], [0, 0]);\
	top.setSelection((~gui[\cf5 \\soundFileUnitRowViews\cf3 ].size - 1), [0, 0]);\
	bot.setSelection(0, [0, 0]);\
	~gui[\cf5 \\soundFileUnitRowViews\cf3 ].add(did->\cf4 nil\cf3 );\
	~graphNeedsUpdate = \cf4 true\cf3 ;\
	\
	range = ~crps.removeSoundFileUnit(~gui[\cf5 \\cf\cf3 ], did);\
\cf2 //	"Popping this provisional unit: ".post; num.postln;\cf3 \
\cf2 //	"Range: ".post;	range.postln;\cf3 \
	(range != \cf4 nil\cf3 ).if\
	\{	\
		range.do(\{ \cf4 |rv|\cf3 \
			\cf4 var\cf3  waveformArea = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ];\
			\cf4 var\cf3  tmp = ~newSoundFileUnitRow.value(~gui[\cf5 \\cf\cf3 ], rv, ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segments\cf3 ][\cf5 \\view\cf3 ], waveformArea[\cf5 \\fullView\cf3 ], waveformArea[\cf5 \\closeView\cf3 ]); \cf2 // the data model has already been updated!!!!\cf3 \
			~gui[\cf5 \\soundFileUnitRowViews\cf3 ].add(rv -> tmp);\
			~gui[\cf5 \\soundFileUnitRowViews\cf3 ][rv + 1].pop;\
			~gui[\cf5 \\soundFileUnitRowViews\cf3 ][rv + 1].do(\{\cf4 |item|\cf3  item.remove; item.free \});\
			~gui[\cf5 \\soundFileUnitRowViews\cf3 ].add((rv + 1) -> \cf4 nil\cf3 );\
		\});\
	\};\
\
	(~gui[\cf5 \\soundFileUnitRowViews\cf3 ].size > 0).if\
	\{\
		~updateCurrentSoundFileUnit.value(~gui[\cf5 \\cp\cf3 ] % ~gui[\cf5 \\soundFileUnitRowViews\cf3 ].size);\
		(~gui[\cf5 \\cp\cf3 ]..(~gui[\cf5 \\soundFileUnitRowViews\cf3 ].size - 1)).do(\{ \cf4 |prow|\cf3 	\
			top.setSelection(prow, ~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ][prow][4..5] * 44.1);\
		\});\
		bot.setSelection(0, ~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ][~gui[\cf5 \\cp\cf3 ]][4..5] * 44.1);\
	\};\
	~crps.segmentUnits(~gui[\cf5 \\cf\cf3 ]);\
\};\
\
~buildGraphParams = \{ \cf4 |tabnum, xx, yy, ss, dragtarget = nil, fontcolor, initSelection|\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 	\cf4 var\cf3  descrids = \cf4 Array\cf3 [], selected;\
	\cf4 var\cf3  graph = ~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graph\cf3 ], graphparams = ~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ];\
	\cf4 var\cf3  gpheight = graphparams[\cf5 \\view\cf3 ].bounds.height;\
\
	~crps[\cf5 \\dtable\cf3 ].keys.asArray.sort.do(\{ \cf4 |descr|\cf3  descrids = descrids.add(~crps[\cf5 \\dtable\cf3 ][descr].asString) \});\
	~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\xx\cf3 ] = ~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\xx\cf3 ] ? xx;\
	~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\yy\cf3 ] = ~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\yy\cf3 ] ? yy;\
	~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\ss\cf3 ] = ~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\ss\cf3 ] ? ss;\
	\
	~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ][\cf5 \\view\cf3 ].children.do(\{\cf4 |child|\cf3  child.remove; child.free \});\
	\cf6 "BUILDING GRAPH PARAMS!!!"\cf3 .postln;\
	\
	graph.sync;\
	graph.descriptors_(xx, yy, ss).fontColor_(fontcolor).dragTarget_(dragtarget).zoomFactor_(1@1).transFactor_(0@0);\
	graph.clients_([	\cf2 // unitData Viewer, player, MFCC plotter\cf3 \
		\{ \cf4 |chosen1|\cf3  graphparams[\cf5 \\unitData\cf3 ].items_(~crps.getSoundFileUnitMetadata(chosen1.state[0], chosen1.state[1])[0..16].collect(\{\cf4 |elem|\cf3  elem.asString\})) \},	\cf2 // link scene to metadata view \cf3 \
		\{ \cf4 |chosen2|\cf3  ~playSegment.value(chosen2.state) \},\
		\{ \cf4 |chosen3|\cf3 \
			\cf4 Plotter\cf3 (parent: ~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\highlighter\cf3 ])\
				.value_(~crps[\cf5 \\sfutable\cf3 ][ ~crps[\cf5 \\sfmap\cf3 ][chosen3.state[0]] ][\cf5 \\mfccs\cf3 ][chosen3.state[1]][6..].ampdb)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 				.plotMode_(\cf5 \\plines\cf3 )\
\pard\pardeftab560\ql\qnatural
\cf3 				.findSpecs_(\cf4 true\cf3 );\
		\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 	]);\
	graph.highlight([0,0]);\
	\cf2 // the 4 columns: names, mins, currently selected unit, maxes\cf3 \
	graphparams[\cf5 \\minList\cf3 ].remove;\
	graphparams[\cf5 \\unitData\cf3 ].remove;\
	graphparams[\cf5 \\maxList\cf3 ].remove;\
	\
\cf2 //	~gui[\\tabs][1][\\areas][\\graph].cArray.postln;\cf3 \
	\
	graphparams.add(\cf5 \\dList\cf3  -> \cf4 SCListView\cf3 (graphparams[\cf5 \\view\cf3 ], \cf4 Rect\cf3 (0, 25, 80, gpheight - 25))\
			.stringColor_(\cf4 Color\cf3 .white).selectedStringColor_(\cf4 Color\cf3 .green)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 			.items_(~crps[\cf5 \\dtable\cf3 ].keys.asArray.sort.collect(\{ \cf4 |descr|\cf3  ~crps[\cf5 \\dtable\cf3 ][descr].asString \})))\
		.add(\cf5 \\xLabel\cf3  -> \cf4 StaticText\cf3 (graphparams[\cf5 \\view\cf3 ], \cf4 Rect\cf3 (85, 5, 80, 20))\
			.string_(\cf6 "X"\cf3 ).stringColor_(\cf4 Color\cf3 .green))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 		.add(\cf5 \\minList\cf3  -> \cf4 SCListView\cf3 (graphparams[\cf5 \\view\cf3 ], \cf4 Rect\cf3 (85, 25, 80, gpheight - 25))\
			.stringColor_(\cf4 Color\cf3 .white).selectedStringColor_(\cf4 Color\cf3 .green)\
			.items_(~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graph\cf3 ].cArray[0..16].collect(\{\cf4 |col|\cf3  col.minItem.asString \}))\
			.value_(~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\xx\cf3 ])\
			.action_(\{ \cf4 |selection|\cf3 \
				graph.descriptors_(selection.value.max(0).min(descrids.size),\
					~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ][\cf5 \\unitData\cf3 ].value,\
					~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ][\cf5 \\maxList\cf3 ].value\
				)\
			\}))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 		.add(\cf5 \\yLabel\cf3  -> \cf4 StaticText\cf3 (graphparams[\cf5 \\view\cf3 ], \cf4 Rect\cf3 (170, 5, 80, 20))\
			.string_(\cf6 "Y"\cf3 ).stringColor_(\cf4 Color\cf3 .green))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 		.add(\cf5 \\unitData\cf3  -> \cf4 SCListView\cf3 (graphparams[\cf5 \\view\cf3 ], \cf4 Rect\cf3 (170, 25, 80, gpheight - 25))\
			.stringColor_(\cf4 Color\cf3 .white).selectedStringColor_(\cf4 Color\cf3 .green)\
			.items_(~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\areas\cf3 ][\cf5 \\graph\cf3 ].cArray.flop[0][0..16].collect(\{\cf4 |item|\cf3  item.asString \}))\
			.value_(~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\yy\cf3 ])\
			.action_(\{ \cf4 |selection|\cf3 \
				graph.descriptors_(~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ][\cf5 \\minList\cf3 ].value,\
					selection.value.max(0).min(descrids.size),\
					~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ][\cf5 \\maxList\cf3 ].value\
				)\
			\}))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 		.add(\cf5 \\sLabel\cf3  -> \cf4 StaticText\cf3 (graphparams[\cf5 \\view\cf3 ], \cf4 Rect\cf3 (255, 5, 80, 20))\
			.string_(\cf6 "S"\cf3 ).stringColor_(\cf4 Color\cf3 .green))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 		.add(\cf5 \\maxList\cf3  -> \cf4 SCListView\cf3 (graphparams[\cf5 \\view\cf3 ], \cf4 Rect\cf3 (255, 25, 80, gpheight - 25))\
			.stringColor_(\cf4 Color\cf3 .white).selectedStringColor_(\cf4 Color\cf3 .green)\
			.items_(~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graph\cf3 ].cArray[0..16].collect(\{\cf4 |col|\cf3  col.maxItem.asString \}))\
			.value_(~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\ss\cf3 ])\
			.action_(\{ \cf4 |selection|\cf3 \
				graph.descriptors_(~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ][\cf5 \\minList\cf3 ].value,\
					~gui[\cf5 \\tabs\cf3 ][tabnum][\cf5 \\areas\cf3 ][\cf5 \\graphParams\cf3 ][\cf5 \\unitData\cf3 ].value,\
					selection.value.max(0).min(descrids.size)\
				)\
			\}));\
\};\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 \
~scheduleUpdates = \{ \cf4 |num|\cf3 \
	(num == 0).if \{ (1..3).do(\{ \cf4 |n|\cf3  ~gui[\cf5 \\tabs\cf3 ][n][\cf5 \\needsUpdate\cf3 ] = \cf4 true\cf3  \}) \} \{ ~gui[\cf5 \\tabs\cf3 ][num][\cf5 \\needsUpdate\cf3 ] = \cf4 true\cf3  \};\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 ~playSegment = \{ \cf4 |pair|\cf3 \
	\cf4 var\cf3  cf, relid = pair[1];\
	(pair[0].isNumber).if \{ cf = ~crps[\cf5 \\sfmap\cf3 ][pair[0]] \} \{ cf = pair[0] \};\
	\cf6 "Playing unit number: "\cf3 .post; relid.post; \cf6 ", from "\cf3 .post; cf.postln;\
	\cf4 Post\cf3  << \cf6 "offset: "\cf3  << (~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\units\cf3 ][relid][4] * 0.001) << \cf6 " dur: "\cf3  << (~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\units\cf3 ][relid][5] * 0.001) << \cf4 Char\cf3 .nl;\
	(~crps[\cf5 \\sftable\cf3 ][ cf ][\cf5 \\bfrR\cf3 ] == \cf4 nil\cf3 ).if\
	\{\
		\cf6 "PLAYING MONO"\cf3 .postln;\
		~audio[\cf5 \\monoPlayer\cf3 ].set(\cf5 \\bufNum\cf3 , ~crps[\cf5 \\sftable\cf3 ][ cf ][\cf5 \\bfrL\cf3 ].bufnum, \cf5 \\offset\cf3 , (~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\units\cf3 ][relid][4] * 0.001), \cf5 \\dur\cf3 , (~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\units\cf3 ][relid][5] * 0.001));	\cf2 // msecs -> secs\cf3 \
		~audio[\cf5 \\mBus\cf3 ].set(1);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 	\} \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 		\cf6 "PLAYING STEREO"\cf3 .postln;\
		~audio[\cf5 \\stereoPlayer\cf3 ].set(\cf5 \\bufNumL\cf3 , ~crps[\cf5 \\sftable\cf3 ][ cf ][\cf5 \\bfrL\cf3 ].bufnum, \cf5 \\bufNumR\cf3 , ~crps[\cf5 \\sftable\cf3 ][ cf ][\cf5 \\bfrR\cf3 ].bufnum, \cf5 \\offset\cf3 , (~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\units\cf3 ][relid][4] * 0.001), \cf5 \\dur\cf3 , (~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\units\cf3 ][relid][5] * 0.001));	\cf2 // msecs -> secs\cf3 \
		~audio[\cf5 \\sBus\cf3 ].set(1);\
	\}\
\};\
)\
\
\cf2 ////***********************************************************************************************\cf3 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf2 ////		Load Audio Server + Send SynthDefs\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\cf4 Server\cf3 .default = \cf4 Server\cf3 .internal;\
~audio = \cf4 Dictionary\cf3 [];\
~audio.add(\cf5 \\server\cf3  -> \cf4 Server\cf3 .default.boot);\
\pard\pardeftab560\li1700\fi-1700\ql\qnatural
\cf3 \
(\
\cf4 SynthDef\cf3 .new(\cf5 \\unitSamplerMono\cf3 , \{ \cf4 |out=0, busTrig=1, bufNum, transp=1, offset=0,attack=0.01,dur=1,release=0.5, pan=0, da=0|\cf3 \
	\cf4 var\cf3  env, chunk, inTrig;\
	inTrig = \cf4 InTrig\cf3 .kr(busTrig);\
	env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .linen(attack, (dur - attack - release), release, 1), gate: inTrig, doneAction: da);\
	chunk = \cf4 PlayBuf\cf3 .ar(1, bufNum, transp, inTrig, (offset.max(0).min(\cf4 BufDur\cf3 .kr(bufNum) - dur) * \cf4 BufSampleRate\cf3 .kr(bufNum)));\
	\cf4 Out\cf3 .ar( out, \cf4 Pan2\cf3 .ar(chunk * env, pan) );\
\}).send(~audio[\cf5 \\server\cf3 ]);\
\
\cf4 SynthDef\cf3 .new(\cf5 \\unitSamplerStereo\cf3 , \{ \cf4 |out=0, busTrig=1, bufNumL, bufNumR, transp=1, offset=0,attack=0.01,dur=1,release=0.5, pan=0, da=0|\cf3 \
	\cf4 var\cf3  env, chunkL, chunkR, inTrig;\
	inTrig = \cf4 InTrig\cf3 .kr(busTrig);\
	env = \cf4 EnvGen\cf3 .kr(\cf4 Env\cf3 .linen(attack, (dur - attack - release), release, 1), gate: inTrig, doneAction: da);\
	chunkL = \cf4 PlayBuf\cf3 .ar(1, bufNumL, transp, inTrig, (offset.max(0).min(\cf4 BufDur\cf3 .kr(bufNumL) - dur) * \cf4 BufSampleRate\cf3 .kr(bufNumL)) );\
	chunkR = \cf4 PlayBuf\cf3 .ar(1, bufNumR, transp, inTrig, (offset.max(0).min(\cf4 BufDur\cf3 .kr(bufNumR) - dur) * \cf4 BufSampleRate\cf3 .kr(bufNumR)));\
	\cf4 Out\cf3 .ar( out, [chunkL, chunkR] * env );\
\}).send(~audio[\cf5 \\server\cf3 ]);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 ////***********************************************************************************************\cf3 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf2 ////		Init Database + Build GUI...\cf3 \
\pard\pardeftab560\ql\qnatural
\cf3 \
(\
~crps = \cf4 CorpusDB\cf3 .new(\cf6 "manifold"\cf3 , s);\
\
~audio.add(\cf5 \\mBus\cf3  -> \cf4 Bus\cf3 .control(s, 1));\
~audio.add(\cf5 \\monoPlayer\cf3  -> \cf4 Synth\cf3 .new(\cf5 \\unitSamplerMono\cf3 , [\cf5 \\busTrig\cf3 , ~audio[\cf5 \\mBus\cf3 ]]));\
~audio.add(\cf5 \\sBus\cf3  -> \cf4 Bus\cf3 .control(s, 1));\
~audio.add(\cf5 \\stereoPlayer\cf3  -> \cf4 Synth\cf3 .new(\cf5 \\unitSamplerStereo\cf3 , [\cf5 \\busTrig\cf3 , ~audio[\cf5 \\sBus\cf3 ]]));\
\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf2 ////***********************************************************************************************\cf3 \
\cf2 ////		Begin GUI code\cf3 \
\cf2 ////\cf3 \
\cf2 //// window + top level container (tabbedView) + top level container views and storage\cf3 \
\
~gui = \cf4 Dictionary\cf3 [];\
~gui.add(\cf5 \\topWindow\cf3  -> \cf4 SCWindow\cf3 (\cf6 "manifold db"\cf3 , \cf4 Rect\cf3 (305, 75, 1120, 840)).acceptsMouseOver_(\cf4 true\cf3 ));\
~gui.add(\cf5 \\tabs\cf3  -> \cf4 Dictionary\cf3 []);\
~gui.add(\cf5 \\cf\cf3  -> 0)		\cf2 // 'helper' vars w/ more-or-less global scope\cf3 \
	.add(\cf5 \\cp\cf3  -> 0)\
	.add(\cf5 \\fileListDict\cf3  -> \cf4 Dictionary\cf3 [])\
	.add(\cf5 \\soundFileUnitRowViews\cf3  -> \cf4 Dictionary\cf3 []);\
\
~gui[\cf5 \\tabs\cf3 ].add(\cf5 \\view\cf3  -> \cf4 TabbedView\cf3 ( ~gui[\cf5 \\topWindow\cf3 ], \cf4 nil\cf3 , [\cf6 "import"\cf3 ,\cf6 "graph/db"\cf3 ], [\cf4 Color\cf3 .gray(0.25, 0.5)])\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 	.tabPosition_(\cf5 \\top\cf3 ).tabWidth_(70).tabHeight_(13).tabCurve_(3)\
	.backgrounds_([\cf4 Color\cf3 .gray(0.2)]).stringColor_(\cf4 Color\cf3 .white).stringFocusedColor_(\cf4 Color\cf3 .green));\
	\
~gui[\cf5 \\tabs\cf3 ][\cf5 \\view\cf3 ].views.do(\{ \cf4 |vw, ix|\cf3 \
	~gui[\cf5 \\tabs\cf3 ].add(ix -> \cf4 Dictionary\cf3 [\cf5 \\nameTag\cf3  -> [\cf5 \\importAnalyzeSegment\cf3 , \cf5 \\graph\cf3 , \cf5 \\scene\cf3 , \cf5 \\web\cf3 ][ix], \cf5 \\view\cf3  -> \cf4 SCScrollView\cf3 (~gui[\cf5 \\tabs\cf3 ][\cf5 \\view\cf3 ].views[ix], ~gui[\cf5 \\tabs\cf3 ][\cf5 \\view\cf3 ].views[ix].asView.bounds), \cf5 \\areas\cf3  -> \cf4 Dictionary\cf3 [], \cf5 \\needsUpdate\cf3  -> \cf4 true\cf3 ])\
\});\
\
\cf2 //// some additional behaviors for the top level views\cf3 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 ~gui[\cf5 \\topWindow\cf3 ].onClose_( \{\cf4 |ind|\cf3  [~audio[\cf5 \\mBus\cf3 ], ~audio[\cf5 \\sBus\cf3 ], ~audio[\cf5 \\monoPlayer\cf3 ], ~audio[\cf5 \\stereoPlayer\cf3 ], ~crps].do(\cf4 _\cf3 .free) \} );\
\
\cf2 //// containers/areas\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ].add(\cf5 \\waveform\cf3  -> \cf4 Dictionary\cf3 [\cf5 \\view\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (0, 0, 690, 160)).background_(\cf4 Color\cf3 .black)])\
	.add(\cf5 \\analysis\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (-5, 165, 700, 420)).background_(\cf4 Color\cf3 .black))\
	.add(\cf5 \\filesList\cf3  -> \cf4 Dictionary\cf3 [\cf5 \\view\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (700, 0, 415, 440)).background_(\cf4 Color\cf3 .black)])\
	.add(\cf5 \\segBtns\cf3  -> \cf4 Dictionary\cf3 [\cf5 \\view\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (5, 585, 25, 225)).background_(\cf4 Color\cf3 .black)])\
	.add(\cf5 \\segments\cf3  -> \cf4 Dictionary\cf3 [\cf5 \\view\cf3  -> \cf4 SCScrollView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (25, 585, 1080, 225)).background_(\cf4 Color\cf3 .black)])\
	.add(\cf5 \\highlighter\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (695, 445, 415, 170)));\
\
~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\areas\cf3 ].add(\cf5 \\graph\cf3  -> \cf4 CorpusUnitViewer\cf3 (~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (0,0, 640, 640), ~crps, 5, 6, 7))\
	.add(\cf5 \\graphParams\cf3  -> \cf4 Dictionary\cf3 [\cf5 \\view\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (650, 5, 360, 400)).background_(\cf4 Color\cf3 .black)])\
	.add(\cf5 \\unitPlayer\cf3  -> \cf4 Dictionary\cf3 [\cf5 \\view\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (650, 650, 360, 160)).background_(\cf4 Color\cf3 .black)])\
	.add(\cf5 \\highlighter\cf3  -> \cf4 SCCompositeView\cf3 (~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (650, 405, 360, 240)));\
\
\cf2 //// waveform area\cf3 \
~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ].add(\cf5 \\fullView\cf3  -> \cf4 SCSoundFileView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (0, 0, 690, 60))\
		.gridColor_(\cf4 Color\cf3 .gray)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 		.action_())\
	.add(\cf5 \\zoomBar\cf3  -> \cf4 SCRangeSlider\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (0, 60, 690, 20))\
		.lo_(0.0).hi_(1.0)\
		.mouseUpAction_(\{ \cf4 |slider|\cf3 \
			\cf4 var\cf3  zaRangeLo, zaRangeHi, zoomArray, temp;\
			\cf2 //"slider: ".post; slider.lo.post; slider.hi.postln;\cf3 \
			\cf4 var\cf3  cview = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ][\cf5 \\closeView\cf3 ];\
			cview.zoomToFrac(1);\
			cview.scrollToStart;\
			cview.zoom(slider.hi - slider.lo);\
			cview.scroll(slider.lo / (slider.hi - slider.lo));\
			zoomArray = ~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\rawdescrs\cf3 ].flop;\
			zaRangeLo = (slider.lo * zoomArray[0].size).floor.asInteger;\
			zaRangeHi = (slider.hi * zoomArray[0].size).ceil.asInteger;\
			temp = zoomArray.collect(\{ \cf4 |row|\cf3  row[zaRangeLo..zaRangeHi] \});\
			\
			~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\analysis\cf3 ].children.do(\cf4 _\cf3 .remove);\
			\cf4 Plotter\cf3 (parent: ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\analysis\cf3 ])\
				.value_(temp)\
\pard\pardeftab560\ql\qnatural
\cf3 				.plotMode_(\cf5 \\linear\cf3 )\
				.superpose_(\cf4 false\cf3 )\
				.findSpecs_(\cf4 true\cf3 )\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf2 //				.editFunc_(\{|pl, pli, idx, val|\cf3 \
\cf2 //					pli.post; "...".post; idx.post; "....".post; val.postln;\cf3 \
\cf2 //					~crps[\\sfutable][~gui[\\cf]][\\rawdescrs][pli][idx] = val;\cf3 \
\cf2 //				\});\cf3 \
		\});\
)\
	.add(\cf5 \\closeView\cf3  -> \cf4 SCSoundFileView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (0, 80, 690, 80))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 		.gridColor_(\cf4 Color\cf3 .gray)\
\pard\pardeftab560\ql\qnatural
\cf3 		.mouseUpAction_(\{ \cf4 |vw,x,y|\cf3 \
			\cf2 // update the data model\cf3 \
			~crps.updateSoundFileUnit(~gui[\cf5 \\cf\cf3 ], ~gui[\cf5 \\cp\cf3 ], \cf4 nil\cf3 ,\
				(~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ][\cf5 \\closeView\cf3 ].selectionStart(0) / 44.1).max(0).floor,\
				(~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ][\cf5 \\closeView\cf3 ].selectionSize(0) / 44.1).ceil);\
\
			\cf2 // update number boxes + fullView\cf3 \
			~updateSoundFileUnitRow.value(~gui[\cf5 \\cp\cf3 ], ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ][\cf5 \\fullView\cf3 ]);\
			\
			~crps.segmentUnits(~gui[\cf5 \\cf\cf3 ]);\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 			~gui[\cf5 \\soundFileUnitRowViews\cf3 ].keys.do(\{ \cf4 |pid|\cf3 \
				~gui[\cf5 \\soundFileUnitRowViews\cf3 ][pid][5].value_(~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ][pid][0..16].asString);\
			\});\
\pard\pardeftab560\ql\qnatural
\cf3 			~graphNeedsUpdate = \cf4 true\cf3 ;\
		\})\
	);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\cf2 //// filesList area\cf3 \
~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ].add(\cf5 \\addFileButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (5, 5, 45, 20))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 		.states_([[\cf6 "+file"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf4 |bttn|\cf3 \
			\cf4 CocoaDialog\cf3 .getPaths(\{ \cf4 |paths|\cf3 \
				paths.do(\{ \cf4 |pth|\cf3 \
					\cf4 var\cf3  sf, thepath;\
					\cf4 var\cf3  fileListView = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ];\
					sf = \cf4 SoundFile\cf3 .openRead(pth.asString);\
					\cf2 //"SF: ".post; sf.post; " with ".post; sf.numChannels.post; " channels.".postln;\cf3 \
					(sf != \cf4 nil\cf3 ).if\
					\{\
						thepath = \cf4 PathName\cf3 .new(sf.path.asString);\
						~crps.addSoundFile(thepath.fullPath, sf.numChannels);\
						fileListView.items_((fileListView.items ++ [thepath.fileName]).asSet.asArray.sort);\
						~gui[\cf5 \\fileListDict\cf3 ].add(thepath.fileName -> thepath.fullPath);\
					\}\
				\});\
			\},\{	\cf6 "cancelled"\cf3 .postln \}, \cf4 false\cf3 );\
		\}))\
	.add(\cf5 \\addFolderButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (55, 5, 45, 20))\
		.states_([[\cf6 "+dir"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf4 |bttn|\cf3 \
			\cf4 var\cf3  counter = 0;\
			\cf4 CocoaDialog\cf3 .getPaths(\{ \cf4 |paths|\cf3 \
				paths.do(\{ \cf4 |pth|\cf3 \
					\cf4 var\cf3  fileListView = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ];\
					\cf4 var\cf3  sf = \cf4 SoundFile\cf3 .openRead(pth.asString);\
					\cf4 var\cf3  thepath = \cf4 PathName\cf3 .new(sf.path.asString);\
					\cf4 var\cf3  thefiles = \cf4 PathName\cf3 .new(thepath.pathOnly.asString).files;\
					\cf4 var\cf3  theentries = \cf4 PathName\cf3 .new(thepath.pathOnly.asString).files;\
					counter = thefiles.size;\
					\cf4 AppClock\cf3 .sched(0.001, \
					\{\
						(counter > 0).if\
						\{ \
							~crps.addSoundFile(thefiles[counter - 1].fullPath, sf.numChannels);\
							fileListView.items_((fileListView.items ++ [theentries[counter - 1].fileName]).asSet.asArray.sort);\
							~gui[\cf5 \\fileListDict\cf3 ].add(theentries[counter - 1].fileName -> theentries[counter - 1].fullPath);\
							counter = counter - 1;\
							0.001\
						\} \{ \cf4 nil\cf3  \};\
					\});\
				\});\
			\},\{\
				\cf6 "cancelled"\cf3 .postln;\
			\}, \cf4 false\cf3 );\
		\}))\
	.add(\cf5 \\removeFileButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (105, 5, 45, 20))\
		.states_([[\cf6 "-file"\cf3 , \cf4 Color\cf3 .red, \cf4 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf4 |btn|\cf3 \
			\cf4 var\cf3  findex = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ].value;\
			\cf4 var\cf3  fname = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ].items[ findex ];\
			\cf4 var\cf3  tmp = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ].items;\
			tmp.removeAt(findex);\
			~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ].items_(tmp);\
			~crps.removeSoundFile(~gui[\cf5 \\fileListDict\cf3 ][fname]);\
			~gui[\cf5 \\fileListDict\cf3 ].add(fname -> \cf4 nil\cf3 );\
			~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ].valueAction_(0);\
		\}))\
	.add(\cf5 \\importButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (155, 5, 45, 20))\
		.states_([[\cf6 "import"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf4 |btn|\cf3 \
			\cf4 CocoaDialog\cf3 .getPaths(\{ \cf4 |paths|\cf3 \
				paths.do(\{ \cf4 |pth|\cf3 \
					\cf4 var\cf3  thepath = \cf4 PathName\cf3 .new(pth.asString).fullPath.asString, tmp = \cf4 Array\cf3 [];\
					\cf4 var\cf3  fileListView = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ];\
					~crps.importCorpusFromXML(~audio[\cf5 \\server\cf3 ], thepath);\
					~crps[\cf5 \\sftable\cf3 ].keys.do(\{\cf4 |filename|\cf3 \
						tmp = tmp ++ [\cf4 PathName\cf3 .new(filename).fileName];\
						~gui[\cf5 \\fileListDict\cf3 ].add(\cf4 PathName\cf3 .new(filename).fileName -> \cf4 PathName\cf3 .new(filename).fullPath);\
					\});\
					\
					fileListView.items_((fileListView.items ++ tmp).asSet.asArray.sort);\
					\
					~graphNeedsUpdate = \cf4 true\cf3 ;\
\pard\pardeftab560\ql\qnatural
\cf3 				\});\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 			\},\{	\cf6 "cancelled"\cf3 .postln \}, \cf4 false\cf3 );\
		\}))\
	.add(\cf5 \\exportButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (205, 5, 45, 20))\
		.states_([[\cf6 "export"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf4 |btn|\cf3 \
			\cf4 CocoaDialog\cf3 .savePanel(\{ \cf4 |path|\cf3 \
				~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\dropUnanalyzedButton\cf3 ].action.value;\
				~crps.exportCorpusToXML(~audio[\cf5 \\server\cf3 ], path);\
			\},\{\
				\cf6 "cancelled"\cf3 .postln;\
			\});\
		\}))\
	.add(\cf5 \\dropUnanalyzedButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (255, 5, 120, 20))\
		.states_([[\cf6 "-- drop unanalyzed"\cf3 , \cf4 Color\cf3 .red, \cf4 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf4 |bttn|\cf3 \
			\cf4 var\cf3  tmp = \cf4 Array\cf3 [];\
			~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ].items.do(\{ \cf4 |file|\cf3 \
				file.asString.postln;\
				(~crps[\cf5 \\sftable\cf3 ][~gui[\cf5 \\fileListDict\cf3 ][file.asString]][\cf5 \\abfr\cf3 ] != \cf4 nil\cf3 ).if\
				\{\
					tmp = tmp.add(file.asString);\
				\} \{\
					~crps.removeSoundFile(~gui[\cf5 \\fileListDict\cf3 ][file.asString]);\
				\};		\
			\});\
			~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\fileListView\cf3 ].items_(tmp.asSet.asArray.sort);\
		\}))\
	.add(\cf5 \\fileListView\cf3  -> \cf4 SCListView\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (5, 30, 400, 400))\
		.stringColor_(\cf4 Color\cf3 .white)\
		.selectedStringColor_(\cf4 Color\cf3 .green)\
		.items_([])\
		.action_(\{ \cf4 |q|\cf3 \
			\cf4 var\cf3  cf, sf, tmp, responder, responder2;\
			\cf2 // declare abbreviations for areas of the gui to be accessed:\cf3 \
			\cf4 var\cf3  waveformArea = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ], analysisArea = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\analysis\cf3 ], fileListArea = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\filesList\cf3 ];\
			\cf2 // empty ~soundFileUnits out\cf3 \
			~gui[\cf5 \\soundFileUnitRowViews\cf3 ].do(\{ \cf4 |line|\cf3  line.pop; line.do(\{ \cf4 |elem|\cf3  elem.remove; elem.free \}) \});\
			~gui[\cf5 \\soundFileUnitRowViews\cf3 ] = \cf4 Dictionary\cf3 [];\
			\cf2 // get the menu selection and set current file global\cf3 \
			cf = ~gui[\cf5 \\fileListDict\cf3 ][ fileListArea[\cf5 \\fileListView\cf3 ].items[q.value] ];\
			~gui[\cf5 \\cf\cf3 ] = cf;\
			\cf2 // if non-nil, read out cached units into sfunitrows\cf3 \
			(~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ] != \cf4 nil\cf3 ).if\
			\{\
				~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ].do(\{ \cf4 |pu, ix|\cf3 \
					~gui[\cf5 \\soundFileUnitRowViews\cf3 ] = ~gui[\cf5 \\soundFileUnitRowViews\cf3 ].add(ix -> \
						~newSoundFileUnitRow.value(\
							~gui[\cf5 \\cf\cf3 ],\
							ix,\
							~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segments\cf3 ][\cf5 \\view\cf3 ],\
							waveformArea[\cf5 \\fullView\cf3 ],\
							waveformArea[\cf5 \\closeView\cf3 ]\
						);\
					)\
				\});\
			\} \{\
				\cf6 "...not cached... "\cf3 .postln;\
			\};\
			\cf2 // read sound file and stream or post analysis data\cf3 \
			sf = \cf4 SoundFile\cf3 .new;\
			(sf.openRead(cf) == \cf4 true\cf3 ).if\
			\{\
				fileListArea[\cf5 \\fileListView\cf3 ].enabled = \cf4 false\cf3 ;\
				waveformArea[\cf5 \\fullView\cf3 ].soundfile = sf;\
				waveformArea[\cf5 \\fullView\cf3 ].read(0, sf.numFrames);\
				waveformArea[\cf5 \\closeView\cf3 ].soundfile = sf;\
				waveformArea[\cf5 \\closeView\cf3 ].read(0, sf.numFrames);\
				\cf6 "window should refresh now!"\cf3 .postln;\
				~gui[\cf5 \\topWindow\cf3 ].refresh;\
				\
				(~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\rawdescrs\cf3 ] == \cf4 nil\cf3 ).if\
				\{	\cf2 // stream it\cf3 \
					~crps.analyzeSoundFile(cf.asString);\
					\cf2 // schedule the updates\cf3 \
					responder2 = \cf4 OSCresponder\cf3 (~audio[\cf5 \\server\cf3 ].addr, \cf5 '/tr'\cf3 , \{ \cf4 |time,resp,msg|\cf3 \
						\cf4 AppClock\cf3 .sched(0, \{ \cf4 |tm|\cf3 \
							analysisArea.children.do(\cf4 _\cf3 .remove);\
\pard\pardeftab560\ql\qnatural
\cf3 							\cf4 Plotter\cf3 (parent: analysisArea)\
								.value_(~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\rawdescrs\cf3 ].flop)\
								.plotMode_(\cf5 \\plines\cf3 )\
								.superpose_(\cf4 false\cf3 )\
								.findSpecs_(\cf4 true\cf3 )\
								.editFunc_(\{\cf4 |pl, pli, idx, val|\cf3 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 									pli.post; \cf6 "..."\cf3 .post; idx.post; \cf6 "...."\cf3 .post; val.postln;\
									~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\rawdescrs\cf3 ][pli][idx] = val;\
								\});\
							\cf4 nil\cf3 \
						\});\
\pard\pardeftab560\ql\qnatural
\cf3 					\}).add;\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 					\cf2 // schedule the last update			\cf3 \
					\cf4 AppClock\cf3 .sched(sf.duration + 0.001, \{ \cf4 |tm|\cf3 \
						analysisArea.children.do(\cf4 _\cf3 .remove);\
						\cf4 Plotter\cf3 (parent: analysisArea)\
\pard\pardeftab560\ql\qnatural
\cf3 							.value_(~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\rawdescrs\cf3 ].flop)\
							.plotMode_(\cf5 \\plines\cf3 )\
							.superpose_(\cf4 false\cf3 )\
							.findSpecs_(\cf4 true\cf3 )\
							.editFunc_(\{\cf4 |pl, pli, idx, val|\cf3 \
								pli.post; \cf6 "..."\cf3 .post; idx.post; \cf6 "...."\cf3 .post; val.postln;\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 								~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\rawdescrs\cf3 ][pli][idx] = val;\
							\});\
						fileListArea[\cf5 \\fileListView\cf3 ].enabled = \cf4 true\cf3 ;\
						\cf4 nil\cf3 \
					\});\
				\} \{ \cf2 // post it if cached \cf3 \
					analysisArea.children.do(\cf4 _\cf3 .remove);\
\pard\pardeftab560\ql\qnatural
\cf3 					\cf4 Plotter\cf3 (parent: analysisArea)\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 						.value_(~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\rawdescrs\cf3 ].flop)\
\pard\pardeftab560\ql\qnatural
\cf3 						.plotMode_(\cf5 \\plines\cf3 )\
						.superpose_(\cf4 false\cf3 )\
						.findSpecs_(\cf4 true\cf3 )\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 						.editFunc_(\{\cf4 |pl, pli, idx, val|\cf3 \
							pli.post; \cf6 "..."\cf3 .post; idx.post; \cf6 "...."\cf3 .post; val.postln;\
							~crps[\cf5 \\sfutable\cf3 ][cf][\cf5 \\rawdescrs\cf3 ][pli][idx] = val;\
						\});\
					\cf4 AppClock\cf3 .sched(0, \{ \cf4 |tm|\cf3  fileListArea[\cf5 \\fileListView\cf3 ].enabled = \cf4 true\cf3  \});\
				\};\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 				[responder, responder2].do(\cf4 _\cf3 .remove; \cf4 _\cf3 .free);	\cf2 // clean up!\cf3 \
			\};\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 			\cf2 // update the sfviews (close and full) no matter what\cf3 \
			~updateSFViews.value(~gui[\cf5 \\cf\cf3 ], waveformArea[\cf5 \\fullView\cf3 ], waveformArea[\cf5 \\closeView\cf3 ], 0);\
		\}));\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 //// segments area\cf3 \
~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segBtns\cf3 ].add(\cf5 \\plusButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segBtns\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (2, 5, 20, 20))\
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 	.states_([[\cf6 "+"\cf3 ,\cf4 Color\cf3 .black,\cf4 Color\cf3 .white]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf4 |bttn|\cf3 \
		\cf4 var\cf3  np, tmp;\
		\cf4 var\cf3  waveformArea = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ];\
		(~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ] == \cf4 nil\cf3 ).if\
		\{\
			np = 0;\
			~crps.addSoundFileUnit(~gui[\cf5 \\cf\cf3 ], np, [0, 500]);\
		\} \{ \cf2 // else\cf3 \
			tmp = ~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ].collect(\{ \cf4 |unit|\cf3  unit[4..5] \}).sort(\{\cf4 |a,b|\cf3  a[0] > b[0]\});\
			np = ~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ].size;\
			~crps.addSoundFileUnit(~gui[\cf5 \\cf\cf3 ], np, [tmp[0][0] + tmp[0][1], 500]);\
		\};\
\
		~crps.segmentUnits(~gui[\cf5 \\cf\cf3 ]);\
		tmp = ~newSoundFileUnitRow.value(~gui[\cf5 \\cf\cf3 ], np, ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segments\cf3 ][\cf5 \\view\cf3 ], waveformArea[\cf5 \\fullView\cf3 ], waveformArea[\cf5 \\closeView\cf3 ]);\
		~gui[\cf5 \\soundFileUnitRowViews\cf3 ] = ~gui[\cf5 \\soundFileUnitRowViews\cf3 ].add(np -> tmp);\
		waveformArea[\cf5 \\fullView\cf3 ].setSelection(np, ~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ][np][4..5] * 44.1);\
		~scheduleUpdates.value(1);\
	\});\
);\
~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segBtns\cf3 ].add(\cf5 \\fillButton\cf3  -> \cf4 SCButton\cf3 (~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segBtns\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (2, 30, 20, 20))\
	.states_([[\cf6 "->"\cf3 ,\cf4 Color\cf3 .black,\cf4 Color\cf3 .white]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf4 |bttn|\cf3 \
		\cf4 var\cf3  last = ~gui[\cf5 \\soundFileUnitRowViews\cf3 ].size - 1;\
		\cf4 var\cf3  sfile = ~gui[\cf5 \\cf\cf3 ];\
		\cf4 var\cf3  sfid = ~crps[\cf5 \\sfmap\cf3 ].findKeyForValue(~gui[\cf5 \\cf\cf3 ]);\
		\cf4 var\cf3  waveformArea = ~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\waveform\cf3 ];\
		\cf2 // update the last one, filling to duration of sfile\cf3 \
		~crps.updateSoundFileUnit(sfile, last,\
			dur: (~crps[\cf5 \\sftable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\bfrL\cf3 ].duration * 1000) - ~crps.getSoundFileUnitMetadata(sfid , last)[4]);\
		(last > 0).if\
		\{	\
			((last - 1)..0).do(\{ \cf4 |pid|\cf3 \
				~crps.updateSoundFileUnit(sfile, pid,\
					dur: (~crps.getSoundFileUnitMetadata(sfid , pid + 1)[4] - ~crps.getSoundFileUnitMetadata(sfid , pid)[4]));\
			\});\
		\};\
		~gui[\cf5 \\soundFileUnitRowViews\cf3 ].do(\{ \cf4 |line|\cf3  line.pop; line.do(\{ \cf4 |elem|\cf3  elem.remove; elem.free \}) \});\
		~gui[\cf5 \\soundFileUnitRowViews\cf3 ] = \cf4 Dictionary\cf3 [];\
		\
		(~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ] != \cf4 nil\cf3 ).if\
		\{\
			~crps[\cf5 \\sfutable\cf3 ][~gui[\cf5 \\cf\cf3 ]][\cf5 \\units\cf3 ].do(\{ \cf4 |pu, ix|\cf3 \
				~gui[\cf5 \\soundFileUnitRowViews\cf3 ] = ~gui[\cf5 \\soundFileUnitRowViews\cf3 ].add(ix -> \
					~newSoundFileUnitRow.value(\
						~gui[\cf5 \\cf\cf3 ],\
						ix,\
						~gui[\cf5 \\tabs\cf3 ][0][\cf5 \\areas\cf3 ][\cf5 \\segments\cf3 ][\cf5 \\view\cf3 ],\
						waveformArea[\cf5 \\fullView\cf3 ],\
						waveformArea[\cf5 \\closeView\cf3 ]\
					);\
				)\
			\});\
		\};\
		~updateSFViews.value(~gui[\cf5 \\cf\cf3 ], waveformArea[\cf5 \\fullView\cf3 ], waveformArea[\cf5 \\closeView\cf3 ], 0);\
	\});\
);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\
\cf2 ////====================================================================================\cf3 \
\cf2 ////\cf3 \
\cf2 ////		Graph View (tabs.views[1])\cf3 \
\
~gui[\cf5 \\tabs\cf3 ][\cf5 \\view\cf3 ].focusActions[1] = \{\
	\cf6 "focussing!"\cf3 .postln;\
	(~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\needsUpdate\cf3 ] == \cf4 true\cf3 ).if\
	\{\
		\cf6 "init the graph"\cf3 .postln; \
		~buildGraphParams.value(1, 5, 6, 7, \cf4 nil\cf3 , \cf4 Color\cf3 .blue);\
		~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\needsUpdate\cf3 ] = \cf4 false\cf3 ;\
	\}\
\};\
\
~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\areas\cf3 ][\cf5 \\unitPlayer\cf3 ].add(\cf5 \\linkButton\cf3  -> \cf4 SCButton\cf3 .new( ~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\areas\cf3 ][\cf5 \\unitPlayer\cf3 ][\cf5 \\view\cf3 ], \cf4 Rect\cf3 (5, 5, 60, 20))\
	.states_([[\cf6 "touch"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .white], [\cf6 "search"\cf3 , \cf4 Color\cf3 .black, \cf4 Color\cf3 .green]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf4 |btn|\cf3 \
		btn.value.postln;\
		(btn.value == 1).if\
		\{\
			~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\areas\cf3 ][\cf5 \\graph\cf3 ].setSearchFlag_(\cf4 false\cf3 );\
		\} \{\
			~gui[\cf5 \\tabs\cf3 ][1][\cf5 \\areas\cf3 ][\cf5 \\graph\cf3 ].setSearchFlag_(\cf4 true\cf3 );\
		\};\
	\});\
);\
\
\pard\pardeftab560\ql\qnatural
\cf2 // specify plot layout\cf3 \
\cf4 GUI\cf3 .skin.plot.gridLinePattern = \cf4 FloatArray\cf3 [2, 1];\
\cf4 GUI\cf3 .skin.plot.fontColor = \cf4 Color\cf3 .white;\
\cf4 GUI\cf3 .skin.plot.gridColorX = \cf4 Color\cf3 .gray(0.75, 0.25);\
\cf4 GUI\cf3 .skin.plot.gridColorY = \cf4 Color\cf3 .gray(0.75, 0.25);\
\cf4 GUI\cf3 .skin.plot.background = \cf4 Color\cf3 .black;\
\cf4 GUI\cf3 .skin.plot.plotColor = \cf4 Color\cf3 .blue;\
\cf4 GUI\cf3 .skin.plot.labelX = \cf4 nil\cf3 ;\
\cf4 GUI\cf3 .skin.plot.labelY = \cf4 nil\cf3 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\cf2 //// display the window + run "app"\cf3 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf3 ~gui[\cf5 \\topWindow\cf3 ].front;\
\
\pard\pardeftab560\ql\qnatural
\cf3 )}