{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red255\green102\blue0;
\red0\green0\blue255;\red0\green115\blue0;\red0\green0\blue191;\red96\green96\blue96;\red51\green51\blue191;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs18 \cf2 //This file is part of cbpsc (last revision @ version 0.4).\cf3 \
\pard\pardeftab720
\cf2 //\cf3 \
\cf2 //cbpsc is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\cf3 \
\cf2 //\cf3 \
\cf2 //cbpsc is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\cf3 \
\cf2 //\cf3 \
\cf2 //You should have received a copy of the GNU General Public License along with cbpsc.  If not, see <http://www.gnu.org/licenses/>.\cf3 \
\cf2 //\cf3 \
\cf2 // cbpsc : created by Thomas Stoll : tms@corpora-sonorus.com : www.corpora-sonorus.com\cf3 \
\pard\pardeftab560\li1140\fi-1140
\cf2 //\cf3 \
\cf2 // Copyright 2010-11, Thomas Stoll\cf3 \
\
\cf2 // 1. evaluate the parenthasized functions\cf3 \
(\
\cf4 ~newSoundFileUnitRow\cf3  = \{ \cf5 |currfile, pid, parent, top, bot|\cf3 \
	\cf5 var\cf3  currSFU = \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][currfile], foo;\
	[ \cf7 SCButton\cf3 .new(parent, \cf7 Rect\cf3 (0, (pid * 25), 22, 22))\
			.states_([[pid.asString, \cf7 Color\cf3 .blue, \cf7 Color\cf3 .white], [pid.asString, \cf7 Color\cf3 .white, \cf7 Color\cf3 .blue]])\
			.value_(0)\
			.action_(\{ \cf5 |bttn|\cf3 \
				\cf4 ~updateSFViews\cf3 .value(currfile, top, bot, pid);\
				\cf4 ~updateMFCCSpectrum\cf3 .value(currfile, pid, 1);\
			\}),\
		\cf7 SCButton\cf3 .new(parent, \cf7 Rect\cf3 (25, (pid * 25), 22, 22))\
			.states_([[\cf8 "X"\cf3 , \cf7 Color\cf3 .white, \cf7 Color\cf3 .red]])\
			.value_(0)\
			.mouseUpAction_(\{ \cf5 |num|\cf3  \cf7 AppClock\cf3 .sched(0, \{\cf5 |now|\cf3  \cf4 ~deleteSoundFileUnit\cf3 .value(pid, top, bot); \cf9 nil\cf3 \}) \}),\
		\cf7 SCButton\cf3 .new(parent, \cf7 Rect\cf3 (50, (pid * 25), 22, 22))\
			.states_([[\cf8 "P"\cf3 , \cf7 Color\cf3 .black, \cf7 Color\cf3 .green]])\
			.value_(0)\
			.mouseUpAction_(\{ \cf4 ~playSegment\cf3 .value([currfile, pid]) \}),\
\pard\pardeftab560
\cf3 		\cf7 SCNumberBox\cf3 .new(parent, \cf7 Rect\cf3 (75, (pid * 25), 60, 20))\
\pard\pardeftab560\li1140\fi-1140
\cf3 			.value_(currSFU[\cf6 \\keys\cf3 ][pid][4])\
			.action_(\{\cf5 |val|\cf3  \cf2 // "ONSET VAL: ".post; val.value.postln;\cf3 \
				\cf4 ~crps\cf3 .updateSoundFileUnit(currfile, pid, \cf9 nil\cf3 , val.value.floor);\
				\cf4 ~crps\cf3 .segmentUnits(currfile);\
				\cf4 ~updateSFViews\cf3 .value(currfile, top, bot, pid);\
\cf2 //				~updateCurrentSoundFileUnit.value(pid,1);\cf3 \
				\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][pid][5].value_((currSFU[\cf6 \\keys\cf3 ][pid][0..]++currSFU[\\mfccs][pid][0..]).asString);\
			\}),\
		\cf7 SCNumberBox\cf3 .new(parent, \cf7 Rect\cf3 (140, (pid * 25), 60, 20))\
			.value_(currSFU[\cf6 \\keys\cf3 ][pid][5])\
			.action_(\{\cf5 |val|\cf3  \cf2 // "DUR VAL: ".post; val.value.postln;\cf3 \
				\cf4 ~crps\cf3 .updateSoundFileUnit(currfile, pid, \cf9 nil\cf3 , \cf9 nil\cf3 , val.value.ceil);\
				\cf4 ~crps\cf3 .segmentUnits(currfile);\
				\cf4 ~updateSFViews\cf3 .value(currfile, top, bot, pid);\
\cf2 //				~updateCurrentSoundFileUnit.value(pid,1);\cf3 \
				\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][pid][5].value_(\cf0 (currSFU[\cf10 \\keys\cf0 ][pid][0..]++currSFU[\\mfccs][pid][0..])\cf3 .asString);\
			\}),\
		\cf7 SCTextField\cf3 .new(parent, \cf7 Rect\cf3 (205, (pid * 25), 700, 20))\
			.value_((currSFU[\\keys][pid][0..]++currSFU[\\mfccs][pid][0..]).asString),\
		pid.asInteger ];\
\};\
\
\cf4 ~updateSoundFileUnitRow\cf3  = \{ \cf5 |rid, bot|\cf3 \
	[rid, bot].postln;\
	\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][rid][3].value_(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ][rid][4]); \cf2 ////!!!!!!!!!\cf3 \
	\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][rid][4].value_(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ][rid][5]);\
	bot.setSelection(rid, [0, 0]);\
	bot.setSelection(rid, \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ][rid][4..5] * 44.1);\
	\cf2 //"Row ".post; rid.post; " updated.".postln;\cf3 \
\};\
\
\cf4 ~updateSFViews\cf3  = \{ \cf5 |cfpath, top, bot, currid|\cf3 \
	\cf5 var\cf3  theunits = \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cfpath][\cf6 \\keys\cf3 ];\
	theunits.postln;\
	\cf2 // clear Views\cf3 \
	(0..63).do(\{ \cf5 |i|\cf3  top.selectNone(i) \});\
	bot.selectNone(0);\
	\cf2 // read out units into the two views if they exist\cf3 \
	(theunits != \cf9 nil\cf3 ).if\
	\{\
		theunits.do(\{ \cf5 |row, index|\cf3  top.setSelection(index, [row[4], row[5]] * 44.1) \});\
		bot.setSelection(0, (theunits[currid][4..5] * 44.1));\
		\cf2 //unselect\cf3 \
		\cf7 Post\cf3  << \cf8 "CURR: "\cf3  << \cf4 ~gui\cf3 [\cf6 \\cp\cf3 ] << \cf8 " ... "\cf3  << \cf8 "NEXT: "\cf3  << currid << \cf8 "\\n"\cf3 ;\
		(\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ]] != \cf9 nil\cf3 ).if \{ \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ]][0].value_(0)\};\
		\cf2 //update\cf3 \
		\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ] = currid;\
		\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ]][0].value_(1);\
		\cf2 //~updateCurrentSoundFileUnit.value(currid,1);\cf3 \
	\};\
\};\
\
\cf4 ~updateMFCCSpectrum\cf3  = \{ \cf5 |currfile, pid, tab|\cf3 \
	\cf5 var\cf3  currSFU = \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][currfile], foo;\
	\
	currSFU[\cf6 \\mfccs\cf3 ][pid][6..].ampdb.postln;\
	\
	(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\view\cf3 ].children != \cf9 nil\cf3 ).if \{ \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\view\cf3 ].children.do(\{ \cf5 |child|\cf3  child.remove; child.free \}) \};	\
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ].add(\cf6 \\ms\cf3  -> \cf7 MultiSliderView\cf3 .new(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0,0,125,225)));\
	\
	currSFU[\cf6 \\mfccs\cf3 ][pid][6..].postln; \cf8 "::::"\cf3 .postln; \
	foo = (1 + (currSFU[\cf6 \\mfccs\cf3 ][pid][6..].ampdb / 32)).min(1.0).max(0.0);\
	\cf2 //foo.postln;\cf3 \
	\
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\ms\cf3 ]
\f1 .value_(
\f0 foo
\f1 );\
	
\f0 \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\ms\cf3 ]
\f1 .isFilled_(\cf9 true\cf3 ); \cf2 // width in pixels of each stick\cf3 \
\pard\pardeftab560
\cf3 	
\f0 \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\ms\cf3 ]
\f1 .indexThumbSize_(225 / 25 * 0.2); \cf2 // spacing on the value axis\cf3 \
	
\f0 \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\ms\cf3 ]
\f1 .gap_((225 / 25 * 0.8));\
	
\f0 \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\ms\cf3 ]
\f1 .indexIsHorizontal_(\cf9 false\cf3 );
\f0 \
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tab][\cf6 \\areas\cf3 ][\cf6 \\highlighter\cf3 ][\cf6 \\view\cf3 ].refresh;\
\pard\pardeftab560\li1140\fi-1140
\cf3 \};\
\
\cf4 ~updateCurrentSoundFileUnit\cf3  = \{ \cf5 |cpuid|\cf3 \
	\cf2 //unselect\cf3 \
	\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ]][0].value_(0);\
	\cf2 //update\cf3 \
	\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ] = cpuid;\
	\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ]][0].value_(0);\
\};\
\
\cf4 ~deleteSoundFileUnit\cf3  = \{ \cf5 |did, top, bot|\cf3 \
	\cf5 var\cf3  range, num = \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][did].pop;\
	\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][did].do(\{\cf5 |item|\cf3  item.remove; item.free \});\
	top.setSelection(\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ], [0, 0]);\
	top.setSelection((\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].size - 1), [0, 0]);\
	bot.setSelection(0, [0, 0]);\
	\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].add(did->\cf9 nil\cf3 );\
	\cf4 ~graphNeedsUpdate\cf3  = \cf9 true\cf3 ;\
	\
	range = \cf4 ~crps\cf3 .removeSoundFileUnit(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], did);\
\cf2 //	"Popping this provisional unit: ".post; num.postln;\cf3 \
\cf2 //	"Range: ".post;	range.postln;\cf3 \
	(range != \cf9 nil\cf3 ).if\
	\{	\
		range.do(\{ \cf5 |rv|\cf3 \
			\cf5 var\cf3  waveformArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ];\
			\cf5 var\cf3  tmp = \cf4 ~newSoundFileUnitRow\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], rv, \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segments\cf3 ][\cf6 \\view\cf3 ], waveformArea[\cf6 \\fullView\cf3 ], waveformArea[\cf6 \\closeView\cf3 ]); \cf2 // the data model has already been updated!!!!\cf3 \
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].add(rv -> tmp);\
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][rv + 1].pop;\
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][rv + 1].do(\{\cf5 |item|\cf3  item.remove; item.free \});\
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].add((rv + 1) -> \cf9 nil\cf3 );\
		\});\
	\};\
\
	(\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].size > 0).if\
	\{\
		\cf4 ~updateCurrentSoundFileUnit\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ] % \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].size);\
		(\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ]..(\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].size - 1)).do(\{ \cf5 |prow|\cf3 	\
			top.setSelection(prow, \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ][prow][4..5] * 44.1);\
		\});\
		bot.setSelection(0, \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ]][4..5] * 44.1);\
	\};\
	\cf4 ~crps\cf3 .segmentUnits(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]);\
\};\
\
\cf4 ~buildGraphParams\cf3  = \{ \cf5 |tabnum, xx, yy, ss, dragtarget = nil, fontcolor, initSelection|\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 	\cf5 var\cf3  descrids = \cf7 Array\cf3 [], selected;\
	\cf5 var\cf3  graph = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graph\cf3 ], graphparams = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ];\
	\cf5 var\cf3  gpheight = graphparams[\cf6 \\view\cf3 ].bounds.height;\
\
	\cf4 ~crps\cf3 [\cf6 \\dtable\cf3 ].keys.asArray.sort.do(\{ \cf5 |descr|\cf3  descrids = descrids.add(\cf4 ~crps\cf3 [\cf6 \\dtable\cf3 ][descr].asString) \});\
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\xx\cf3 ] = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\xx\cf3 ] ? xx;\
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\yy\cf3 ] = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\yy\cf3 ] ? yy;\
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\ss\cf3 ] = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\ss\cf3 ] ? ss;\
	\
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ][\cf6 \\view\cf3 ].children.do(\{\cf5 |child|\cf3  child.remove; child.free \});\
	\cf8 "BUILDING GRAPH PARAMS!!!"\cf3 .postln;\
	\
	graph.sync;\
	graph.descriptors_(xx, yy, ss).fontColor_(fontcolor).dragTarget_(dragtarget).zoomFactor_(1@1).transFactor_(0@0);\
	graph.clients_([	\cf2 // unitData Viewer, player, MFCC plotter\cf3 \
		\{ \cf5 |chosen1|\cf3  graphparams[\cf6 \\unitData\cf3 ].items_(\cf4 ~crps\cf3 .getSoundFileUnitMetadata(chosen1.state[0], chosen1.state[1])[0..20].collect(\{\cf5 |elem|\cf3  elem.asString\})) \},	\cf2 // link scene to metadata view \cf3 \
		\{ \cf5 |chosen2|\cf3  \cf4 ~playSegment\cf3 .value(chosen2.state) \},\
		\{ \cf5 |chosen3|\cf3 \
			\cf4 ~updateMFCCSpectrum\cf3 .value(\cf4 ~crps\cf3 [\cf6 \\sfmap\cf3 ][chosen3.state[0]], chosen3.state[1], 2);\
\cf2 //			Plotter(parent: ~gui[\\tabs][tabnum][\\areas][\\highlighter])\cf3 \
\cf2 //				.value_(~crps[\\sfutable][ ~crps[\\sfmap][chosen3.state[0]] ][\\mfccs][chosen3.state[1]][6..].ampdb)\cf3 \
\cf2 //				.plotMode_(\\plines)\cf3 \
\pard\pardeftab560\li1140\fi-1140
\cf2 //				.findSpecs_(true);\cf3 \
\pard\pardeftab560
\cf3 		\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 	]);\
	graph.highlight([0,0]);\
	\cf2 // the 4 columns: names, mins, currently selected unit, maxes\cf3 \
	graphparams[\cf6 \\minList\cf3 ].remove;\
	graphparams[\cf6 \\unitData\cf3 ].remove;\
	graphparams[\cf6 \\maxList\cf3 ].remove;\
	\
\cf2 //	~gui[\\tabs][2][\\areas][\\graph].cArray.postln;\cf3 \
	\
	graphparams.add(\cf6 \\dList\cf3  -> \cf7 SCListView\cf3 (graphparams[\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0, 25, 80, gpheight - 25))\
			.stringColor_(\cf7 Color\cf3 .white).selectedStringColor_(\cf7 Color\cf3 .green)\
\pard\pardeftab560\li1140\fi-1140
\cf3 			.items_(\cf4 ~crps\cf3 [\cf6 \\dtable\cf3 ].keys.asArray.sort.collect(\{ \cf5 |descr|\cf3  \cf4 ~crps\cf3 [\cf6 \\dtable\cf3 ][descr].asString \})))\
		.add(\cf6 \\xLabel\cf3  -> \cf7 StaticText\cf3 (graphparams[\cf6 \\view\cf3 ], \cf7 Rect\cf3 (85, 5, 80, 20))\
			.string_(\cf8 "X"\cf3 ).stringColor_(\cf7 Color\cf3 .green))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 		.add(\cf6 \\minList\cf3  -> \cf7 SCListView\cf3 (graphparams[\cf6 \\view\cf3 ], \cf7 Rect\cf3 (85, 25, 80, gpheight - 25))\
			.stringColor_(\cf7 Color\cf3 .white).selectedStringColor_(\cf7 Color\cf3 .green)\
			.items_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graph\cf3 ].cArray[0..20].collect(\{\cf5 |col|\cf3  col.minItem.asString \}))\
			.value_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\xx\cf3 ])\
			.action_(\{ \cf5 |selection|\cf3 \
				graph.descriptors_(selection.value.max(0).min(descrids.size),\
					\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ][\cf6 \\unitData\cf3 ].value,\
					\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ][\cf6 \\maxList\cf3 ].value\
				)\
			\}))\
\pard\pardeftab560\li1140\fi-1140
\cf3 		.add(\cf6 \\yLabel\cf3  -> \cf7 StaticText\cf3 (graphparams[\cf6 \\view\cf3 ], \cf7 Rect\cf3 (170, 5, 80, 20))\
			.string_(\cf8 "Y"\cf3 ).stringColor_(\cf7 Color\cf3 .green))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 		.add(\cf6 \\unitData\cf3  -> \cf7 SCListView\cf3 (graphparams[\cf6 \\view\cf3 ], \cf7 Rect\cf3 (170, 25, 80, gpheight - 25))\
			.stringColor_(\cf7 Color\cf3 .white).selectedStringColor_(\cf7 Color\cf3 .green)\
			.items_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\areas\cf3 ][\cf6 \\graph\cf3 ].cArray.flop[0][0..20].collect(\{\cf5 |item|\cf3  item.asString \}))\
			.value_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\yy\cf3 ])\
			.action_(\{ \cf5 |selection|\cf3 \
				graph.descriptors_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ][\cf6 \\minList\cf3 ].value,\
					selection.value.max(0).min(descrids.size),\
					\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ][\cf6 \\maxList\cf3 ].value\
				)\
			\}))\
\pard\pardeftab560\li1140\fi-1140
\cf3 		.add(\cf6 \\sLabel\cf3  -> \cf7 StaticText\cf3 (graphparams[\cf6 \\view\cf3 ], \cf7 Rect\cf3 (255, 5, 80, 20))\
			.string_(\cf8 "S"\cf3 ).stringColor_(\cf7 Color\cf3 .green))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 		.add(\cf6 \\maxList\cf3  -> \cf7 SCListView\cf3 (graphparams[\cf6 \\view\cf3 ], \cf7 Rect\cf3 (255, 25, 80, gpheight - 25))\
			.stringColor_(\cf7 Color\cf3 .white).selectedStringColor_(\cf7 Color\cf3 .green)\
			.items_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graph\cf3 ].cArray[0..20].collect(\{\cf5 |col|\cf3  col.maxItem.asString \}))\
			.value_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\ss\cf3 ])\
			.action_(\{ \cf5 |selection|\cf3 \
				graph.descriptors_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ][\cf6 \\minList\cf3 ].value,\
					\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][tabnum][\cf6 \\areas\cf3 ][\cf6 \\graphParams\cf3 ][\cf6 \\unitData\cf3 ].value,\
					selection.value.max(0).min(descrids.size)\
				)\
			\}));\
\};\
\pard\pardeftab560\li1140\fi-1140
\cf3 \
\cf4 ~scheduleUpdates\cf3  = \{ \cf5 |num|\cf3 \
	(num == 1).if \{ [2].do(\{ \cf5 |n|\cf3  \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][n][\cf6 \\needsUpdate\cf3 ] = \cf9 true\cf3  \}) \} \{ \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][num][\cf6 \\needsUpdate\cf3 ] = \cf9 true\cf3  \};\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf4 ~playSegment\cf3  = \{ \cf5 |pair|\cf3 \
	\cf5 var\cf3  cf, relid = pair[1];\
	(pair[0].isNumber).if \{ cf = \cf4 ~crps\cf3 [\cf6 \\sfmap\cf3 ][pair[0]] \} \{ cf = pair[0] \};\
	\cf8 "Playing unit number: "\cf3 .post; relid.post; \cf8 ", from "\cf3 .post; cf.postln;\
	\cf7 Post\cf3  << \cf8 "offset: "\cf3  << (\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\keys\cf3 ][relid][4] * 0.001) << \cf8 " dur: "\cf3  << (\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\keys\cf3 ][relid][5] * 0.001) << \cf7 Char\cf3 .nl;\
	(\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][ cf ]\cf0 .tree\cf3 [\cf6 \\bfrR\cf3 ] == \cf9 nil\cf3 ).if\
	\{\
		\cf8 "PLAYING MONO"\cf3 .postln;\
		\cf4 ~audio\cf3 [\cf6 \\monoPlayer\cf3 ].set(\cf6 \\bufNum\cf3 , \cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][ cf ]\cf0 .tree\cf3 [\cf6 \\bfrL\cf3 ].bufnum, \cf6 \\offset\cf3 , (\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\keys\cf3 ][relid][4] * 0.001), \cf6 \\dur\cf3 , (\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\keys\cf3 ][relid][5] * 0.001));	\cf2 // msecs -> secs\cf3 \
		\cf4 ~audio\cf3 [\cf6 \\mBus\cf3 ].set(1);\
\pard\pardeftab560\li1140\fi-1140
\cf3 	\} \{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 		\cf8 "PLAYING STEREO"\cf3 .postln;\
		\cf4 ~audio\cf3 [\cf6 \\stereoPlayer\cf3 ].set(\cf6 \\bufNumL\cf3 , \cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][ cf ]\cf0 .tree\cf3 [\cf6 \\bfrL\cf3 ].bufnum, \cf6 \\bufNumR\cf3 , \cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][ cf ].tree[\cf6 \\bfrR\cf3 ].bufnum, \cf6 \\offset\cf3 , (\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\keys\cf3 ][relid][4] * 0.001), \cf6 \\dur\cf3 , (\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\keys\cf3 ][relid][5] * 0.001));	\cf2 // msecs -> secs\cf3 \
		\cf4 ~audio\cf3 [\cf6 \\sBus\cf3 ].set(1);\
	\}\
\};\
)\
\
\cf2 ////***********************************************************************************************\cf3 \
\pard\pardeftab560\li1140\fi-1140
\cf2 ////		Load Audio Server + Send SynthDefs\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 \
\cf2 // 2., 3., 4. evaluate the following 3 lines\cf3 \
\cf7 Server\cf3 .default = \cf7 Server\cf3 .internal;\
\cf4 ~audio\cf3  = \cf7 Dictionary\cf3 [];\
\cf4 ~audio\cf3 .add(\cf6 \\server\cf3  -> \cf7 Server\cf3 .default.boot);\
\pard\pardeftab560\li1700\fi-1700
\cf3 \
\cf2 // 5. evaluate the following to send 2 synthdefs to the server\cf3 \
(\
\cf7 SynthDef\cf3 .new(\cf6 \\unitSamplerMono\cf3 , \{ \cf5 |out=0, busTrig=1, bufNum, transp=1, offset=0,attack=0.01,dur=1,release=0.5, pan=0, da=0|\cf3 \
	\cf5 var\cf3  env, chunk, inTrig;\
	inTrig = \cf7 InTrig\cf3 .kr(busTrig);\
	env = \cf7 EnvGen\cf3 .kr(\cf7 Env\cf3 .linen(attack, (dur - attack - release), release, 1), gate: inTrig, doneAction: da);\
	chunk = \cf7 PlayBuf\cf3 .ar(1, bufNum, transp, inTrig, (offset.max(0).min(\cf7 BufDur\cf3 .kr(bufNum) - dur) * \cf7 BufSampleRate\cf3 .kr(bufNum)));\
	\cf7 Out\cf3 .ar( out, \cf7 Pan2\cf3 .ar(chunk * env, pan) );\
\}).send(\cf4 ~audio\cf3 [\cf6 \\server\cf3 ]);\
\
\cf7 SynthDef\cf3 .new(\cf6 \\unitSamplerStereo\cf3 , \{ \cf5 |out=0, busTrig=1, bufNumL, bufNumR, transp=1, offset=0,attack=0.01,dur=1,release=0.5, pan=0, da=0|\cf3 \
	\cf5 var\cf3  env, chunkL, chunkR, inTrig;\
	inTrig = \cf7 InTrig\cf3 .kr(busTrig);\
	env = \cf7 EnvGen\cf3 .kr(\cf7 Env\cf3 .linen(attack, (dur - attack - release), release, 1), gate: inTrig, doneAction: da);\
	chunkL = \cf7 PlayBuf\cf3 .ar(1, bufNumL, transp, inTrig, (offset.max(0).min(\cf7 BufDur\cf3 .kr(bufNumL) - dur) * \cf7 BufSampleRate\cf3 .kr(bufNumL)) );\
	chunkR = \cf7 PlayBuf\cf3 .ar(1, bufNumR, transp, inTrig, (offset.max(0).min(\cf7 BufDur\cf3 .kr(bufNumR) - dur) * \cf7 BufSampleRate\cf3 .kr(bufNumR)));\
	\cf7 Out\cf3 .ar( out, [chunkL, chunkR] * env );\
\}).send(\cf4 ~audio\cf3 [\cf6 \\server\cf3 ]);\
\pard\pardeftab560\li1140\fi-1140
\cf3 )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf2 ////***********************************************************************************************\cf3 \
\pard\pardeftab560\li1140\fi-1140
\cf2 ////		Init Database + Build GUI...\cf3 \
\
\pard\pardeftab560
\cf2 // 6. evaluate the following to launch the GUI\cf3 \
(\
\cf2 // 7. CHANGE THE FIRST ARGUMENT TO ANY STRING YOU LIKE\cf3 \
\pard\pardeftab560
\cf4 ~crps\cf3  = \cf7 CorpusDB\cf3 .new(\cf8 "CORPUS.GUI"\cf3 , s);\
\
\cf4 ~audio\cf3 .add(\cf6 \\mBus\cf3  -> \cf7 Bus\cf3 .control(s, 1));\
\cf4 ~audio\cf3 .add(\cf6 \\monoPlayer\cf3  -> \cf7 Synth\cf3 .new(\cf6 \\unitSamplerMono\cf3 , [\cf6 \\busTrig\cf3 , \cf4 ~audio\cf3 [\cf6 \\mBus\cf3 ]]));\
\cf4 ~audio\cf3 .add(\cf6 \\sBus\cf3  -> \cf7 Bus\cf3 .control(s, 1));\
\cf4 ~audio\cf3 .add(\cf6 \\stereoPlayer\cf3  -> \cf7 Synth\cf3 .new(\cf6 \\unitSamplerStereo\cf3 , [\cf6 \\busTrig\cf3 , \cf4 ~audio\cf3 [\cf6 \\sBus\cf3 ]]));\
\
\pard\pardeftab560\li1140\fi-1140
\cf2 ////***********************************************************************************************\cf3 \
\cf2 ////		Begin GUI code\cf3 \
\cf2 ////\cf3 \
\cf2 //// window + top level container (tabbedView) + top level container views and storage\cf3 \
\
\cf4 ~gui\cf3  = \cf7 Dictionary\cf3 [];\
\cf4 ~gui\cf3 .add(\cf6 \\topWindow\cf3  -> \cf7 SCWindow\cf3 ((\cf4 ~crps\cf3 [\cf6 \\anchor\cf3 ].asString ++ \cf8 " db"\cf3 ), \cf7 Rect\cf3 (305, 75, 1120, 840)).acceptsMouseOver_(\cf9 true\cf3 ));\
\cf4 ~gui\cf3 .add(\cf6 \\tabs\cf3  -> \cf7 Dictionary\cf3 []);\
\cf4 ~gui\cf3 .add(\cf6 \\cf\cf3  -> 0)		\cf2 // 'helper' vars w/ more-or-less global scope\cf3 \
	.add(\cf6 \\cp\cf3  -> 0)\
	.add(\cf6 \\fileListDict\cf3  -> \cf7 Dictionary\cf3 [])\
	.add(\cf6 \\soundFileUnitRowViews\cf3  -> \cf7 Dictionary\cf3 [])\
	.add(\cf6 \\latestSFID\cf3  -> -1);\
\
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ].add(\cf6 \\view\cf3  -> \cf7 TabbedView\cf3 ( \cf4 ~gui\cf3 [\cf6 \\topWindow\cf3 ], \cf9 nil\cf3 , [\cf8 "import"\cf3 ,\cf8 "analyze"\cf3 ,\cf8 "graph/db"\cf3 ], [\cf7 Color\cf3 .gray(0.25, 0.5)])\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 	.tabPosition_(\cf6 \\top\cf3 ).tabWidth_(70).tabHeight_(13).tabCurve_(3)\
	.backgrounds_([\cf7 Color\cf3 .gray(0.2)]).stringColor_(\cf7 Color\cf3 .white).stringFocusedColor_(\cf7 Color\cf3 .green));\
	\
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][\cf6 \\view\cf3 ].views.do(\{ \cf5 |vw, ix|\cf3 \
	\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ].add(ix -> \cf7 Dictionary\cf3 [\cf6 \\nameTag\cf3  -> [\cf6 \\import\cf3 , \cf6 \\analyze\cf3 , \cf6 \\graph\cf3 ][ix], \cf6 \\view\cf3  -> \cf7 SCScrollView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][\cf6 \\view\cf3 ].views[ix], \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][\cf6 \\view\cf3 ].views[ix].asView.bounds), \cf6 \\areas\cf3  -> \cf7 Dictionary\cf3 [], \cf6 \\needsUpdate\cf3  -> \cf9 true\cf3 ])\
\});\
\
\cf2 //// some additional behaviors for the top level views\cf3 \
\pard\pardeftab560\li1140\fi-1140
\cf4 ~gui\cf3 [\cf6 \\topWindow\cf3 ].onClose_( \{\cf5 |ind|\cf3  [\cf4 ~audio\cf3 [\cf6 \\mBus\cf3 ], \cf4 ~audio\cf3 [\cf6 \\sBus\cf3 ], \cf4 ~audio\cf3 [\cf6 \\monoPlayer\cf3 ], \cf4 ~audio\cf3 [\cf6 \\stereoPlayer\cf3 ], \cf4 ~crps\cf3 ].do(\cf7 _\cf3 .free) \} );\
\
\cf2 //// containers/areas\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ].add(\cf6 \\filesList\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0, 0, 415, 440)).background_(\cf7 Color\cf3 .black)])\
	.add(\cf6 \\addedFilesList\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (500, 0, 415, 440)).background_(\cf7 Color\cf3 .black)]);\
\
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ].add(\cf6 \\buttons\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (10, 0, 1100, 20)).background_(\cf7 Color\cf3 .black)])\
	.add(\cf6 \\waveform\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (10, 20, 1100, 160)).background_(\cf7 Color\cf3 .black)])\
	.add(\cf6 \\analysis\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (10, 185, 1100, 410)).background_(\cf7 Color\cf3 .black))\
	.add(\cf6 \\segBtns\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0, 600, 25, 215)).background_(\cf7 Color\cf3 .black)])\
	.add(\cf6 \\segments\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCScrollView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (30, 600, 945, 215)).background_(\cf7 Color\cf3 .black)])\
	.add(\cf6 \\highlighter\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (980, 600, 130, 225)).background_(\cf7 Color\cf3 .yellow)]);\
\
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\areas\cf3 ].add(\cf6 \\graph\cf3  -> \cf7 CorpusUnitViewer\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0,0, 640, 640), \cf4 ~crps\cf3 , 5, 6, 7))\
	.add(\cf6 \\graphParams\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (650, 5, 360, 400)).background_(\cf7 Color\cf3 .black)])\
	.add(\cf6 \\unitPlayer\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (650, 650, 360, 160)).background_(\cf7 Color\cf3 .black)])\
	.add(\cf6 \\highlighter\cf3  -> \cf7 Dictionary\cf3 [\cf6 \\view\cf3  -> \cf7 SCCompositeView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (650, 405, 125, 225))]);\
\
\cf2 //// waveform area\cf3 \
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ].add(\cf6 \\fullView\cf3  -> \cf7 SCSoundFileView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0, 0, 1080, 60))\
		.gridColor_(\cf7 Color\cf3 .gray)\
\pard\pardeftab560\li1140\fi-1140
\cf3 		.action_())\
	.add(\cf6 \\zoomBar\cf3  -> \cf7 SCRangeSlider\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0, 60, 1080, 20))\
		.lo_(0.0).hi_(1.0)\
		.mouseUpAction_(\{ \cf5 |slider|\cf3 \
			\cf5 var\cf3  zaRangeLo, zaRangeHi, zoomArray, temp;\
			\cf2 //"slider: ".post; slider.lo.post; slider.hi.postln;\cf3 \
			\cf5 var\cf3  cview = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ][\cf6 \\closeView\cf3 ];\
			cview.zoomToFrac(1);\
			cview.scrollToStart;\
			cview.zoom(slider.hi - slider.lo);\
			cview.scroll(slider.lo / (slider.hi - slider.lo));\
			zoomArray = \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\rawmels\cf3 ].flop;\
			zaRangeLo = (slider.lo * zoomArray[0].size).floor.asInteger;\
			zaRangeHi = (slider.hi * zoomArray[0].size).ceil.asInteger;\
			temp = zoomArray.collect(\{ \cf5 |row|\cf3  row[zaRangeLo..zaRangeHi] \});\
			\
			\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\analysis\cf3 ].children.do(\cf7 _\cf3 .remove);\
			\cf7 Plotter\cf3 (parent: \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\analysis\cf3 ])\
				.value_(temp)\
\pard\pardeftab560
\cf3 				.plotMode_(\cf6 \\linear\cf3 )\
				.superpose_(\cf9 false\cf3 )\
				.findSpecs_(\cf9 true\cf3 )\
\pard\pardeftab560\li1140\fi-1140
\cf3 		\});\
)\
	.add(\cf6 \\closeView\cf3  -> \cf7 SCSoundFileView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (0, 80, 1080, 80))\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 		.gridColor_(\cf7 Color\cf3 .gray)\
\pard\pardeftab560
\cf3 		.mouseUpAction_(\{ \cf5 |vw,x,y|\cf3 \
			\cf2 // update the data model\cf3 \
			\cf4 ~crps\cf3 .updateSoundFileUnit(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], \cf4 ~gui\cf3 [\cf6 \\cp\cf3 ], \cf9 nil\cf3 ,\
				(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ][\cf6 \\closeView\cf3 ].selectionStart(0) / 44.1).max(0).floor,\
				(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ][\cf6 \\closeView\cf3 ].selectionSize(0) / 44.1).ceil);\
\
			\cf2 // update number boxes + fullView\cf3 \
			\cf4 ~updateSoundFileUnitRow\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cp\cf3 ], \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ][\cf6 \\fullView\cf3 ]);\
			\
			\cf4 ~crps\cf3 .segmentUnits(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]);\
\pard\pardeftab560\li1140\fi-1140
\cf3 			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].keys.do(\{ \cf5 |pid|\cf3 \
				\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][pid][5].value_(\cf0 (\cf4 ~crps\cf0 [\cf10 \\sfutable\cf0 ][ \cf4 ~gui\cf0 [\cf10 \\cf\cf0 ] ][\cf10 \\keys\cf0 ][pid][0..]++\cf4 ~crps\cf0 [\cf10 \\sfutable\cf0 ][ \cf4 ~gui\cf0 [\cf10 \\cf\cf0 ] ][\\mfccs][pid][0..]).asString\cf3 ); \cf2 // $$$$\cf3 \
			\});\
			\cf4 ~updateMFCCSpectrum\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], \cf4 ~gui\cf3 [\cf6 \\cp\cf3 ], 2);\
\pard\pardeftab560
\cf3 			\cf4 ~graphNeedsUpdate\cf3  = \cf9 true\cf3 ;\
		\})\
	);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 \
\cf2 //// filesList area\cf3 \
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ].add(\cf6 \\addFileButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (5, 5, 45, 20))\
\pard\pardeftab560\li1140\fi-1140
\cf3 		.states_([[\cf8 "+file"\cf3 , \cf7 Color\cf3 .black, \cf7 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf5 |bttn|\cf3 \
			\cf7 CocoaDialog\cf3 .getPaths(\{ \cf5 |paths|\cf3 \
				paths.do(\{ \cf5 |pth|\cf3 \
					\cf5 var\cf3  sf, thepath;\
					\cf5 var\cf3  fileListView = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ];\
					sf = \cf7 SoundFile\cf3 .openRead(pth.asString);\
					\cf2 //"SF: ".post; sf.post; " with ".post; sf.numChannels.post; " channels.".postln;\cf3 \
					(sf != \cf9 nil\cf3 ).if\
					\{\
						thepath = \cf7 PathName\cf3 .new(sf.path.asString);\
						\cf4 ~gui\cf3 [\cf6 \\latestSFID\cf3 ] = \cf4 ~crps\cf3 .addSoundFile(thepath.fullPath, sf.numChannels);\
						fileListView.items_((fileListView.items ++ [thepath.fileName]).asSet.asArray.sort);\
						\cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ].add(thepath.fileName -> thepath.fullPath);\
						sf.close;\
					\};\
				\});\
			\},\{	\cf8 "cancelled"\cf3 .postln \}, \cf9 false\cf3 );\
		\}))\
	.add(\cf6 \\addFolderButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (55, 5, 45, 20))\
		.states_([[\cf8 "+dir"\cf3 , \cf7 Color\cf3 .black, \cf7 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf5 |bttn|\cf3 \
			\cf7 CocoaDialog\cf3 .getPaths(\{ \cf5 |paths|\cf3 \
				(paths.size != 0).if\
				\{\
					paths.do(\{ \cf5 |pth|\cf3 \
						\cf5 var\cf3  counter, fileListView, sf, thepath, thefiles, theentries, candidatePath, mdFlag;\
						fileListView = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ];\
						sf = \cf7 SoundFile\cf3 .openRead(pth.asString);\
						(sf != \cf9 nil\cf3 ).if\
						\{\
							thepath = \cf7 PathName\cf3 .new(sf.path.asString);\
							thefiles = \cf7 PathName\cf3 .new(thepath.pathOnly.asString).files;\
							theentries = \cf7 PathName\cf3 .new(thepath.pathOnly.asString).files;\
							counter = thefiles.size;\
							\cf7 AppClock\cf3 .sched(0.001, \
							\{\
								(counter > 0).if\
								\{\
									candidatePath = thefiles[counter - 1].fullPath;\
									mdFlag = \cf8 ".md."\cf3 .matchRegexp(candidatePath.asString);\
									\cf7 Post\cf3  << \cf8 "PATH: "\cf3  << candidatePath << \cf8 "... MDFLAG: "\cf3  << mdFlag << \cf8 "\\n"\cf3 ;\
									(mdFlag == \cf9 false\cf3 ).if\
									\{\
										\cf4 ~gui\cf3 [\cf6 \\latestSFID\cf3 ] = \cf4 ~crps\cf3 .addSoundFile(candidatePath, sf.numChannels);\
										fileListView.items_((fileListView.items ++ [theentries[counter - 1].fileName]).asSet.asArray.sort);\
										\cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ].add(theentries[counter - 1].fileName -> theentries[counter - 1].fullPath);\
									\};\
									counter = counter - 1;\
									0.001\
								\} \{ sf.close; \cf9 nil\cf3  \};\
							\});\
						\};\
					\});\
				\};\
			\},\{\
				\cf8 "cancelled"\cf3 .postln;\
			\}, \cf9 false\cf3 );\
		\}))\
		\cf2 //"/Users/tms/dev/supercollider/2.manifold/snd/chanting.speaking/73356_voice_prayer_speaking_reverberant.md.aiff".matchRegexp("md")\cf3 \
	.add(\cf6 \\removeFileButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (105, 5, 45, 20))\
		.states_([[\cf8 "-file"\cf3 , \cf7 Color\cf3 .red, \cf7 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf5 |btn|\cf3 \
			\cf5 var\cf3  findex = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ].value;\
			\cf5 var\cf3  fname = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ].items[ findex ];\
			\cf5 var\cf3  tmp = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ].items;\
			tmp.removeAt(findex);\
			\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ].items_(tmp);\
			\cf4 ~crps\cf3 .removeSoundFile(\cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ][fname]);\
			\cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ].add(fname -> \cf9 nil\cf3 );\
			\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ].valueAction_(0);\
		\}))\
	.add(\cf6 \\importButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (155, 5, 45, 20))\
		.states_([[\cf8 "import"\cf3 , \cf7 Color\cf3 .black, \cf7 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf5 |btn|\cf3 \
			\cf7 CocoaDialog\cf3 .getPaths(\{ \cf5 |paths|\cf3 \
				paths.do(\{ \cf5 |pth|\cf3 \
					\cf5 var\cf3  thepath = \cf7 PathName\cf3 .new(pth.asString).fullPath.asString, tmp = \cf7 Array\cf3 [];\
					\cf5 var\cf3  fileListView = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ];\
					\cf4 ~crps\cf3 .importCorpusFromXML(\cf4 ~audio\cf3 [\cf6 \\server\cf3 ], thepath);\
					\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ].keys.do(\{\cf5 |filename|\cf3 \
						tmp = tmp ++ [\cf7 PathName\cf3 .new(filename).fileName];\
						\cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ].add(\cf7 PathName\cf3 .new(filename).fileName -> \cf7 PathName\cf3 .new(filename).fullPath);\
					\});\
					\
					fileListView.items_((fileListView.items ++ tmp).asSet.asArray.sort);\
					\
					\cf4 ~graphNeedsUpdate\cf3  = \cf9 true\cf3 ; \cf2 // ???\cf3 \
\pard\pardeftab560
\cf3 				\});\
\pard\pardeftab560\li1140\fi-1140
\cf3 			\},\{	\cf8 "cancelled"\cf3 .postln \}, \cf9 false\cf3 );\
		\}))\
	.add(\cf6 \\exportButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (205, 5, 45, 20))\
		.states_([[\cf8 "export"\cf3 , \cf7 Color\cf3 .black, \cf7 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf5 |btn|\cf3 \
			\cf7 CocoaDialog\cf3 .savePanel(\{ \cf5 |path|\cf3 \
				\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\dropUnanalyzedButton\cf3 ].action.value;\
				\cf4 ~crps\cf3 .exportCorpusToXML(\cf4 ~audio\cf3 [\cf6 \\server\cf3 ], path);\
			\},\{\
				\cf8 "cancelled"\cf3 .postln;\
			\});\
		\}))\
	.add(\cf6 \\dropUnanalyzedButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (255, 5, 120, 20))\
		.states_([[\cf8 "-- drop unanalyzed"\cf3 , \cf7 Color\cf3 .red, \cf7 Color\cf3 .white]])\
		.value_(0)\
		.action_(\{ \cf5 |bttn|\cf3 \
			\cf5 var\cf3  tmp = \cf7 Array\cf3 [], fileListArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\fileListView\cf3 ];\
			fileListArea.items.do(\{ \cf5 |file|\cf3 \
				(\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][\cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ][file.asString]].tree[\cf6 \\abfr\cf3 ] != \cf9 nil\cf3 ).if\
				\{\
					tmp = tmp.add(file.asString);\
				\} \{\
					\cf8 "Dropping: "\cf3 .post; file.asString.postln;\
					\cf4 ~crps\cf3 .removeSoundFile(\cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ][file.asString]);\
				\};		\
			\});\
			fileListArea.items_(tmp.asSet.asArray.sort);\
			fileListArea.enabled = \cf9 true\cf3 ;\
		\}))\
	.add(\cf6 \\fileListView\cf3  -> \cf7 SCListView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (5, 30, 400, 400))\
		.stringColor_(\cf7 Color\cf3 .white)\
		.selectedStringColor_(\cf7 Color\cf3 .green)\
		.items_([])\
		.action_(\{ \cf5 |q|\cf3 \
			\cf5 var\cf3  cf, path, file, ext, mdpath, sf, entry;\
			\cf2 // declare abbreviations for areas of the gui to be accessed:\cf3 \
			\cf5 var\cf3  waveformArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ], analysisArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\analysis\cf3 ], fileListArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ], addedFileListArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\addedFilesList\cf3 ];\
			\cf2 // empty ~soundFileUnits out\cf3 \
			\
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].do(\{ \cf5 |line|\cf3  line.pop; line.do(\{ \cf5 |elem|\cf3  elem.remove; elem.free \}) \});\
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ] = \cf7 Dictionary\cf3 [];\
			\cf2 // get the menu selection and set current file gui-level var\cf3 \
			\
			entry = fileListArea[\cf6 \\fileListView\cf3 ].items.removeAt(q.value);\
			cf = \cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ][ entry ];\
			\
			fileListArea[\cf6 \\fileListView\cf3 ].items_(fileListArea[\cf6 \\fileListView\cf3 ].items);\
			fileListArea[\cf6 \\fileListView\cf3 ].refresh;\
			\
			\cf2 //fileListView.items_((fileListView.items ++ [thepath.fileName]).asSet.asArray.sort);\cf3 \
			\
			addedFileListArea[\cf6 \\addedFileListView\cf3 ].items_((addedFileListArea[\cf6 \\addedFileListView\cf3 ].items ++ [entry]).asSet.asArray.sort);\
			\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\buttons\cf3 ][\cf6 \\corpusFiles\cf3 ].items_(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\buttons\cf3 ][\cf6 \\corpusFiles\cf3 ].items ++ [entry]);\
			\
			\
			\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ] = cf;\
			\cf2 // if non-nil, read out cached units into sfunitrows $$$$\cf3 \
			\cf8 "units... "\cf3 .postln;\
			(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ] != \cf9 nil\cf3 ).if\
			\{\
				\cf8 " from cache..."\cf3 .postln;\
				\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ].do(\{ \cf5 |pu, ix|\cf3 \
					\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ] = \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].add(ix -> \
						\cf4 ~newSoundFileUnitRow\cf3 .value(\
							\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ],\
							ix,\
							\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segments\cf3 ][\cf6 \\view\cf3 ],\
							waveformArea[\cf6 \\fullView\cf3 ],\
							waveformArea[\cf6 \\closeView\cf3 ]\
						);\
					)\
				\});\
			\} \{\
				\cf8 "...units not cached... "\cf3 .postln;\
			\};\
						\
			\cf2 // read sound file and stream or post analysis data\cf3 \
			sf = \cf7 SoundFile\cf3 .new;\
			(sf.openRead(cf) == \cf9 true\cf3 ).if\
			\{\
				fileListArea[\cf6 \\fileListView\cf3 ].enabled = \cf9 false\cf3 ;\
				waveformArea[\cf6 \\fullView\cf3 ].soundfile = sf;\
					waveformArea[\cf6 \\fullView\cf3 ].read(0, sf.numFrames);\
				waveformArea[\cf6 \\closeView\cf3 ].soundfile = sf;\
				waveformArea[\cf6 \\closeView\cf3 ].read(0, sf.numFrames);\
				\cf8 "window should refresh now a!"\cf3 .postln;\
				\cf4 ~gui\cf3 [\cf6 \\topWindow\cf3 ].refresh;\
				\
				(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ] == \cf9 nil\cf3 ).if\
				\{	\cf2 // stream it\cf3 \
					\{\cf4 ~crps\cf3 .analyzeSoundFile(cf, sfid:\cf4 ~gui\cf3 [\cf6 \\latestSFID\cf3 ], verbose:\cf9 true\cf3 )\}.fork(\cf7 SystemClock\cf3 );\
					\cf2 // schedule the updates\cf3 \
					\{\
						while(\{\
							(\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][cf].tree[\cf6 \\bfrL\cf3 ] == \cf9 nil\cf3 );\
						\},\{\
							\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][cf]\cf0 .tree\cf3 [\cf6 \\bfrL\cf3 ].postln;\
							0.1.wait;\
						\});\
						0.01.wait;\
						analysisArea.children.do(\cf7 _\cf3 .remove);\
												\
\cf2 //						~origArray = ~crps[\\sfutable][~gui[\\cf]][\\rawmels];\cf3 \
\cf2 //						~modArray = [];\cf3 \
\cf2 //						~descriptors = [0,1,2,7].sort;\cf3 \
\cf2 //						~origArray.flop.do(\{ |col,index| (~descriptors.asSet.includes(index)).if \{ ~modArray = ~modArray ++ col.bubble \} \});\cf3 \
\cf2 //						//~modArray.postcs;				\cf3 \
						\
						\cf7 Plotter\cf3 (parent: analysisArea)\
							.value_(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\rawmels\cf3 ].flop) \cf2 //(~modArray)  //[0]\cf3 \
							.plotMode_(\cf6 \\plines\cf3 )\
\pard\pardeftab560
\cf3 							.superpose_(\cf9 false\cf3 )\
							.findSpecs_(\cf9 true\cf3 )\
\pard\pardeftab560\li1140\fi-1140
\cf3 							.editFunc_(\{\cf5 |pl, pli, idx, val|\cf3 \
\pard\pardeftab560
\cf3 								pli.post; \cf8 "..."\cf3 .post; idx.post; \cf8 "...."\cf3 .post; val.postln;\
								\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ][pli][idx] = val;\
							\});						\
\pard\pardeftab560\li1140\fi-1140
\cf3 						fileListArea[\cf6 \\fileListView\cf3 ].enabled = \cf9 true\cf3 ;\
					\}.fork(\cf7 AppClock\cf3 );\
		\
				\} \{ \cf2 // post it if cached \cf3 \
					analysisArea.children.do(\cf7 _\cf3 .remove);\
					\cf7 Plotter\cf3 (parent: analysisArea)\
						.value_(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ].flop)  \cf2 //[0]\cf3 \
						.plotMode_(\cf6 \\plines\cf3 )\
\pard\pardeftab560
\cf3 						.superpose_(\cf9 false\cf3 )\
\pard\pardeftab560\li1140\fi-1140
\cf3 						.findSpecs_(\cf9 true\cf3 )\
\pard\pardeftab560
\cf3 						.editFunc_(\{\cf5 |pl, pli, idx, val|\cf3 \
							pli.post; \cf8 "..."\cf3 .post; idx.post; \cf8 "...."\cf3 .post; val.postln;\
							\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ][pli][idx] = val;\
\pard\pardeftab560\li1140\fi-1140
\cf3 						\});\
					\cf7 AppClock\cf3 .sched(0, \{ \cf5 |tm|\cf3  fileListArea[\cf6 \\fileListView\cf3 ].enabled = \cf9 true\cf3  \});\
				\};\
			\};\
			\cf2 // update the sfviews (close and full) no matter what\cf3 \
			\cf4 ~updateSFViews\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], waveformArea[\cf6 \\fullView\cf3 ], waveformArea[\cf6 \\closeView\cf3 ], 0);\
		\}));\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\addedFilesList\cf3 ].add(\cf6 \\addedFileListView\cf3  -> \cf7 SCListView\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\addedFilesList\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (5, 30, 400, 400))\
\pard\pardeftab560\li1140\fi-1140
\cf3 	.stringColor_(\cf7 Color\cf3 .white)\
	.items_([]));\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf2 //// segments area\cf3 \
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segBtns\cf3 ].add(\cf6 \\plusButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segBtns\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (2, 5, 20, 20))\
\pard\pardeftab560\li1140\fi-1140
\cf3 	.states_([[\cf8 "+"\cf3 ,\cf7 Color\cf3 .black,\cf7 Color\cf3 .white]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf5 |bttn|\cf3 \
		\cf5 var\cf3  np, tmp;\
		\cf5 var\cf3  waveformArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ];\
		(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ] == \cf9 nil\cf3 ).if\
		\{\
			np = 0;\
			\cf4 ~gui\cf3 [\cf6 \\latestSFID\cf3 ] = \cf4 ~crps\cf3 .addSoundFileUnit(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], np, [0, 500]);\
		\} \{ \cf2 // else\cf3 \
			tmp = \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ].collect(\{ \cf5 |unit|\cf3  unit[4..5] \}).sort(\{\cf5 |a,b|\cf3  a[0] > b[0]\});\
			np = \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ].size;\
			\cf4 ~crps\cf3 .addSoundFileUnit(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], np, [tmp[0][0] + tmp[0][1], 500]);\
		\};\
\
		\cf4 ~crps\cf3 .segmentUnits(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]);\
		tmp = \cf4 ~newSoundFileUnitRow\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], np, \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segments\cf3 ][\cf6 \\view\cf3 ], waveformArea[\cf6 \\fullView\cf3 ], waveformArea[\cf6 \\closeView\cf3 ]);\
		\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ] = \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].add(np -> tmp);\
		waveformArea[\cf6 \\fullView\cf3 ].setSelection(np, \cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ][np][4..5] * 44.1);\
		\cf4 ~scheduleUpdates\cf3 .value(1);\
		\
		(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ].size == 1).if \{ \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][0][0].value_(0); \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ][0][0].valueAction_(1) \};\
\
	\});\
);\
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segBtns\cf3 ].add(\cf6 \\fillButton\cf3  -> \cf7 SCButton\cf3 (\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segBtns\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (2, 30, 20, 20))\
	.states_([[\cf8 "->"\cf3 ,\cf7 Color\cf3 .black,\cf7 Color\cf3 .white]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf5 |bttn|\cf3 \
		\cf5 var\cf3  last = \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].size - 1;\
		\cf5 var\cf3  sfile = \cf4 ~gui\cf3 [\cf6 \\cf\cf3 ];\
		\cf5 var\cf3  sfid = \cf4 ~crps\cf3 [\cf6 \\sfmap\cf3 ].findKeyForValue(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]);\
		\cf5 var\cf3  waveformArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ];\
		\cf2 // update the last one, filling to duration of sfile\cf3 \
		\cf4 ~crps\cf3 .updateSoundFileUnit(sfile, last,\
			dur: (\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]].tree[\cf6 \\bfrL\cf3 ].duration * 1000) - \cf4 ~crps\cf3 .getSoundFileUnitMetadata(sfid , last)[4]);\
		(last > 0).if\
		\{	\
			((last - 1)..0).do(\{ \cf5 |pid|\cf3 \
				\cf4 ~crps\cf3 .updateSoundFileUnit(sfile, pid,\
					dur: (\cf4 ~crps\cf3 .getSoundFileUnitMetadata(sfid , pid + 1)[4] - \cf4 ~crps\cf3 .getSoundFileUnitMetadata(sfid , pid)[4]));\
			\});\
		\};\
		\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].do(\{ \cf5 |line|\cf3  line.pop; line.do(\{ \cf5 |elem|\cf3  elem.remove; elem.free \}) \});\
		\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ] = \cf7 Dictionary\cf3 [];\
		\
		(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ] != \cf9 nil\cf3 ).if\
		\{\
			\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ].do(\{ \cf5 |pu, ix|\cf3 \
				\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ] = \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].add(ix -> \
					\cf4 ~newSoundFileUnitRow\cf3 .value(\
						\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ],\
						ix,\
						\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segments\cf3 ][\cf6 \\view\cf3 ],\
						waveformArea[\cf6 \\fullView\cf3 ],\
						waveformArea[\cf6 \\closeView\cf3 ]\
					);\
				)\
			\});\
		\};\
		\cf4 ~updateSFViews\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], waveformArea[\cf6 \\fullView\cf3 ], waveformArea[\cf6 \\closeView\cf3 ], 0);\
	\});\
);\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\buttons\cf3 ].add(\cf6 \\corpusFiles\cf3  -> \cf7 PopUpMenu\cf3 .new(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\buttons\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (100, 0, 100, 20))\
	.items_([])\
	.stringColor_(\cf7 Color\cf3 .white)\
	.action_(\{ \cf5 |menu|\cf3 \
\cf2 //		~gui[\\fileListDict][ menu.item ].postln;\cf3 \
		\
		\
		\cf5 var\cf3  cf, path, file, ext, mdpath, sf, entry;\
\pard\pardeftab560\li1140\fi-1140
\cf3 			\cf2 // declare abbreviations for areas of the gui to be accessed:\cf3 \
			\cf5 var\cf3  waveformArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\waveform\cf3 ], analysisArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\analysis\cf3 ], fileListArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\filesList\cf3 ], addedFileListArea = \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][0][\cf6 \\areas\cf3 ][\cf6 \\addedFilesList\cf3 ];\
			\cf2 // empty ~soundFileUnits out\cf3 \
			\
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].do(\{ \cf5 |line|\cf3  line.pop; line.do(\{ \cf5 |elem|\cf3  elem.remove; elem.free \}) \});\
			\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ] = \cf7 Dictionary\cf3 [];\
			\cf2 // get the menu selection and set current file gui-level var\cf3 \
			\
\cf2 //			entry = fileListArea[\\fileListView].items[q.value];\cf3 \
\
			cf = \cf4 ~gui\cf3 [\cf6 \\fileListDict\cf3 ][ menu.item ];\
			\
\cf2 //			fileListArea[\\fileListView].items_(fileListArea[\\fileListView].items);\cf3 \
\cf2 //			fileListArea[\\fileListView].refresh;\cf3 \
			\
			\cf2 //fileListView.items_((fileListView.items ++ [thepath.fileName]).asSet.asArray.sort);\cf3 \
			\
\cf2 //			addedFileListArea[\\addedFileListView].items_((addedFileListArea[\\addedFileListView].items ++ [entry]).asSet.asArray.sort);\cf3 \
\cf2 //			~gui[\\tabs][1][\\areas][\\buttons][\\corpusFiles].items_(~gui[\\tabs][1][\\areas][\\buttons][\\corpusFiles].items ++ [entry]);\cf3 \
						\
			\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ] = cf;\
			\cf2 // if non-nil, read out cached units into sfunitrows\cf3 \
			\cf8 "units... "\cf3 .postln;\
			(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ] != \cf9 nil\cf3 ).if\
			\{\
				\cf8 " from cache..."\cf3 .postln;\
				\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\keys\cf3 ].do(\{ \cf5 |pu, ix|\cf3 \
					\cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ] = \cf4 ~gui\cf3 [\cf6 \\soundFileUnitRowViews\cf3 ].add(ix -> \
						\cf4 ~newSoundFileUnitRow\cf3 .value(\
							\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ],\
							ix,\
							\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][1][\cf6 \\areas\cf3 ][\cf6 \\segments\cf3 ][\cf6 \\view\cf3 ],\
							waveformArea[\cf6 \\fullView\cf3 ],\
							waveformArea[\cf6 \\closeView\cf3 ]\
						);\
					)\
				\});\
			\} \{\
				\cf8 "...units not cached... "\cf3 .postln;\
			\};\
						\
			\cf2 // read sound file and stream or post analysis data\cf3 \
			sf = \cf7 SoundFile\cf3 .new;\
			(sf.openRead(cf) == \cf9 true\cf3 ).if\
			\{\
				fileListArea[\cf6 \\fileListView\cf3 ].enabled = \cf9 false\cf3 ;\
				waveformArea[\cf6 \\fullView\cf3 ].soundfile = sf;\
					waveformArea[\cf6 \\fullView\cf3 ].read(0, sf.numFrames);\
				waveformArea[\cf6 \\closeView\cf3 ].soundfile = sf;\
				waveformArea[\cf6 \\closeView\cf3 ].read(0, sf.numFrames);\
				\cf8 "window should refresh now b!"\cf3 .postln;\
				\cf4 ~gui\cf3 [\cf6 \\topWindow\cf3 ].refresh;\
				\
				(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ] == \cf9 nil\cf3 ).if\
				\{	\cf2 // stream it\cf3 \
					\{\cf4 ~crps\cf3 .analyzeSoundFile(cf, sfid:\cf4 ~gui\cf3 [\cf6 \\latestSFID\cf3 ], verbose:\cf9 true\cf3 )\}.fork(\cf7 SystemClock\cf3 );\
					\cf2 // schedule the updates\cf3 \
					\{\
						while(\{\
							(\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][cf].tree[\cf6 \\bfrL\cf3 ] == \cf9 nil\cf3 );\
						\},\{\
							\cf4 ~crps\cf3 [\cf6 \\sftrees\cf3 ][cf]\cf0 .tree\cf3 [\cf6 \\bfrL\cf3 ].postln;\
							0.1.wait;\
						\});\
						0.01.wait;\
						analysisArea.children.do(\cf7 _\cf3 .remove);\
												\
\cf2 //						~origArray = ~crps[\\sfutable][~gui[\\cf]][\\rawmels];\cf3 \
\cf2 //						~modArray = [];\cf3 \
\cf2 //						~descriptors = [0,1,2,7].sort;\cf3 \
\cf2 //						~origArray.flop.do(\{ |col,index| (~descriptors.asSet.includes(index)).if \{ ~modArray = ~modArray ++ col.bubble \} \});\cf3 \
\cf2 //						//~modArray.postcs;				\cf3 \
						\
						\cf7 Plotter\cf3 (parent: analysisArea)\
							.value_(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ]][\cf6 \\rawmels\cf3 ].flop) \cf2 //(~modArray)  //[0]\cf3 \
							.plotMode_(\cf6 \\plines\cf3 )\
\pard\pardeftab560
\cf3 							.superpose_(\cf9 false\cf3 )\
							.findSpecs_(\cf9 true\cf3 )\
\pard\pardeftab560\li1140\fi-1140
\cf3 							.editFunc_(\{\cf5 |pl, pli, idx, val|\cf3 \
\pard\pardeftab560
\cf3 								pli.post; \cf8 "..."\cf3 .post; idx.post; \cf8 "...."\cf3 .post; val.postln;\
								\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ][pli][idx] = val;\
							\});						\
\pard\pardeftab560\li1140\fi-1140
\cf3 						fileListArea[\cf6 \\fileListView\cf3 ].enabled = \cf9 true\cf3 ;\
					\}.fork(\cf7 AppClock\cf3 );\
		\
				\} \{ \cf2 // post it if cached\cf3 \
					\cf8 "RAW DESCRIPTORS ARE NOT NIL!"\cf3 .postln;\
					analysisArea.children.do(\cf7 _\cf3 .remove);\
					\cf7 Plotter\cf3 (parent: analysisArea)\
						.value_(\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ].flop)  \cf2 //[0]\cf3 \
						.plotMode_(\cf6 \\plines\cf3 )\
\pard\pardeftab560
\cf3 						.superpose_(\cf9 false\cf3 )\
\pard\pardeftab560\li1140\fi-1140
\cf3 						.findSpecs_(\cf9 true\cf3 )\
\pard\pardeftab560
\cf3 						.editFunc_(\{\cf5 |pl, pli, idx, val|\cf3 \
							pli.post; \cf8 "..."\cf3 .post; idx.post; \cf8 "...."\cf3 .post; val.postln;\
							\cf4 ~crps\cf3 [\cf6 \\sfutable\cf3 ][cf][\cf6 \\rawmels\cf3 ][pli][idx] = val;\
\pard\pardeftab560\li1140\fi-1140
\cf3 						\});\
					\cf7 AppClock\cf3 .sched(0, \{ \cf5 |tm|\cf3  fileListArea[\cf6 \\fileListView\cf3 ].enabled = \cf9 true\cf3  \});\
				\};\
			\};\
			\cf2 // update the sfviews (close and full) no matter what\cf3 \
			\cf4 ~updateSFViews\cf3 .value(\cf4 ~gui\cf3 [\cf6 \\cf\cf3 ], waveformArea[\cf6 \\fullView\cf3 ], waveformArea[\cf6 \\closeView\cf3 ], 0);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 		\
		\
		\
		\
	\}));\
\
\
\cf2 ////====================================================================================\cf3 \
\cf2 ////\cf3 \
\cf2 ////		Graph View (tabs.views[2])\cf3 \
\
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][\cf6 \\view\cf3 ].focusActions[2] = \{\
	\cf8 "focussing!"\cf3 .postln;\
	(\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\needsUpdate\cf3 ] == \cf9 true\cf3 ).if\
	\{\
		\cf8 "init the graph"\cf3 .postln; \
		\cf4 ~buildGraphParams\cf3 .value(2, 6, 7, 8, \cf9 nil\cf3 , \cf7 Color\cf3 .blue);\
		\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\needsUpdate\cf3 ] = \cf9 false\cf3 ;\
	\}\
\};\
\
\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\areas\cf3 ][\cf6 \\unitPlayer\cf3 ].add(\cf6 \\linkButton\cf3  -> \cf7 SCButton\cf3 .new( \cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\areas\cf3 ][\cf6 \\unitPlayer\cf3 ][\cf6 \\view\cf3 ], \cf7 Rect\cf3 (5, 5, 60, 20))\
	.states_([[\cf8 "touch"\cf3 , \cf7 Color\cf3 .black, \cf7 Color\cf3 .white], [\cf8 "search"\cf3 , \cf7 Color\cf3 .black, \cf7 Color\cf3 .green]])\
	.value_(0)\
	.mouseUpAction_(\{ \cf5 |btn|\cf3 \
		btn.value.postln;\
		(btn.value == 1).if\
		\{\
			\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\areas\cf3 ][\cf6 \\graph\cf3 ].setSearchFlag_(\cf9 false\cf3 );\
		\} \{\
			\cf4 ~gui\cf3 [\cf6 \\tabs\cf3 ][2][\cf6 \\areas\cf3 ][\cf6 \\graph\cf3 ].setSearchFlag_(\cf9 true\cf3 );\
		\};\
	\});\
);\
\
\pard\pardeftab560
\cf2 // specify plot layout\cf3 \
\cf7 GUI\cf3 .skin.plot.gridLinePattern = \cf7 FloatArray\cf3 [2, 1];\
\cf7 GUI\cf3 .skin.plot.fontColor = \cf7 Color\cf3 .white;\
\cf7 GUI\cf3 .skin.plot.gridColorX = \cf7 Color\cf3 .gray(0.75, 0.25);\
\cf7 GUI\cf3 .skin.plot.gridColorY = \cf7 Color\cf3 .gray(0.75, 0.25);\
\cf7 GUI\cf3 .skin.plot.background = \cf7 Color\cf3 .black;\
\cf7 GUI\cf3 .skin.plot.plotColor = \cf7 Color\cf3 .blue;\
\cf7 GUI\cf3 .skin.plot.labelX = \cf9 nil\cf3 ;\
\cf7 GUI\cf3 .skin.plot.labelY = \cf9 nil\cf3 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\pardirnatural
\cf3 \
\cf2 //// display the window + run "app"\cf3 \
\pard\pardeftab560\li1140\fi-1140
\cf4 ~gui\cf3 [\cf6 \\topWindow\cf3 ].front;\
\
\pard\pardeftab560
\cf3 )}