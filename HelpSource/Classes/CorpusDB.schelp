TITLE:: CorpusDB
summary:: Corpus Database
categories:: CorpusDB
related:: Classes/SFTree, Classes/CorpusSearch, Tutorials/CorpusDBIntro, Tutorials/CorpusDBAdvanced

DESCRIPTION:: CorpusDB maintains a database of sound files and associated metadata, including sound file tree mappings tracking the source and processed sound files.

CLASSMETHODS::

METHOD:: new
Instantiate and init.
argument:: anchor
String: Anchor path to corpus's folder.
argument:: server
Server: an Internal(?) server
argument:: hopMS
Int: Set the hop size in milliseconds (defaults to 40).
returns:: CorpusDB object.

INSTANCEMETHODS::

METHOD:: initCorpusDB
Initialize.
argument:: anchor
Symbol: a symbol that is a sort of key for the corpus.
argument:: server
argument:: hopMS

METHOD:: resetCorpus
Set up data structues, build descriptor table, set corpus variables.
argument:: anchor
Symbol: a symbol that is a sort of key for the corpus.

METHOD:: addSoundFile
Adds a sound file to the corpus. No analysis or segmentation is performed.
argument:: filePath
String: Many operations rely on the path as the key reference to the sound file.
argument:: sfid
Int: Default is nil; use nil to have an id automatically assigned. Manually set the id only if you know what you are doing.
argument:: srcFileID
Int: If you are adding a child sound file, this is where you link the parent.
argument:: tRatio
Float: Transposition ratio. Many functions need to know this value as it impacts many basic calculations.
argument:: sfGrpID
Artificial grouping of sound files or units.
argument:: synthdef
List: The Synthdef that modifies the sound file (if any).
argument:: params
List: Params for optional Synthdef.
argument:: subdir
String: Convenient way to utilize sound dir with subfolders.
argument:: reuseFlag
Deprecated.
argument:: importFlag
Flag: Call import function if set.
argument:: uflag
Uniqueflag.

METHOD:: removeSoundFile
TO DO!!! Removes metadata and frees the buffer. Further references using this path or associated sfid will return nil or do nothing.
argument:: filePath
Path of file to remove.

METHOD:: importSoundFileToBuffer
TO DO!!! Performs the actual import of the sound data to a buffer.
argument:: path
argument:: sfid
Int: This is where an ID number/index is assigned to a sound file.
returns:: Nil, if unsuccessful.

METHOD:: analyzeSoundFile
Analyze the sound file and store the reultant metadata as raw (unsegmented).
argument:: sfID
argument:: group
argument:: tRatio
Phasing out; should gather tratio from sound file reference.
argument:: subdir
argument:: verbose

METHOD:: mapIDToSF
Performs mapping of sfid to sf's path. Uses a simple method to ensure that assignments are unique. (Hint: involves addition and the number 1.)
argument:: sfID
argument:: path
argument:: sfGroup
You have the opportunity to change grouping here, which might be rather convenient.argument


METHOD:: addSoundFileUnit
Add a unit to the sound file units table. Segmentation is not actually performed here.
argument:: sfID
argument:: onset
argument:: duration
argument:: tag

METHOD:: updateSoundFileUnit
Update a previously created unit in the sound file units table.
argument:: sfID
argument:: relID
argument:: onset
Float: Update the start time of the segment (seconds).
argument:: duration
Float: Update the duration of the segment (seconds).
argument:: tag
Int: Update the segment's tag.

METHOD:: removeSoundFileUnit
Delete a previously created unit in the sound file units table.
argument:: sfID
argument:: relID
argument:: bounds
returns:: Int: relID that has been removed.

METHOD:: clearSoundFileUnits
TO DO!!! CHECK THIS!!! Delete all the previously created units in the sound file units table.
argument:: sfID

METHOD:: getSndPath
argument:: fileName
TO DO!!! add subdir functionality. Convenience function create path string.


METHOD:: getRawMetadata

METHOD:: segmentUnits
This function performs the actual segmentaiton. It has to be set up by adding sound files, analyzing, and adding sound file units.
argument:: sfID

METHOD:: segmentUnits
Perform the actual segmentation, according previously entered sound files, s.f. units, and analysis metadata.
argument:: sfID

METHOD:: analyzeScalar
Analyze segment of one-dimensional raw metadata and return mean, max, l-value, r-value, and slope.

METHOD:: addCorpusUnit
Map a corpus unit index to a row of metadata.
argument:: uid
argument:: metadata
A single row of metadata.
argument:: verbose

METHOD:: removeCorpusUnit
Remove a single mapped corpus unit.
argument:: uid
argument:: verbose

METHOD:: clearCorpusUnits
Removes all entries from the corpus unit table.

METHOD:: lookupPath

METHOD:: getSoundFileUnitMetadata
Collects and returns the metadata for the corpus units corresponding to the supplied metadata. Filter by sfid, corpus unit id, group id, or some combination of the three. See, there is a use for group ids.
argument:: sfID
argument:: uid
argument:: grpid
argument:: verbose
returns:: Filtered corpus units.

METHOD:: mapSoundFileUnitsToCorpusUnits
argument:: override
Doesn't do anything. Should be phased out.
argument:: verbose
returns:: The coprus unit table (cutable) after building it.

METHOD:: convertCorpusToArray
argument:: type
String: (I, A, M, or all) The corpus data to be returned as an array.
argument:: mapFlag
If True, call mapSoundFileUnitsToCorpusUnits.

METHOD:: convertCorpusToTaggedArray
argument:: tag
Return an array with units matching tag.
argument:: mapFlag
If True, call mapSoundFileUnitsToCorpusUnits.

METHOD:: cuidsForSFID
Return a sorted array of corpus units with matching sfids.
argument:: sfID

METHOD:: importCorpusFromJSON
Loads a corpus from a JSON representation.
argument:: jsonPath
Full path to .json file.
argument:: appendFlag
Pass a non-nil value to append data to corpus.
argument:: importFlag
TODO!!! TEST THIS. Pass a non-nil value to signal that the sound files are to be imported to Buffers.

METHOD:: exportCorpusToJSON
Saves a corpus as a JSON representation.
argument:: jsonPath
Full path to .json file.
