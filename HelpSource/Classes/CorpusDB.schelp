TITLE:: CorpusDB
summary:: Corpus Database
categories:: CorpusDB
related:: Classes/CorpusSearch, Tutorials/CorpusDBIntro, Tutorials/CorpusDBAdvanced

DESCRIPTION:: CorpusDB maintains a database of sound files and associated metadata, including sound file tree mappings tracking the source and processed sound files.

CLASSMETHODS::

METHOD:: new
Instantiate and init.
argument:: name
Symbol or String: a name for the corpus, can be a path
argument:: server
Server: an Internal(?) server
argument:: verbose
Flag: Spits out additional information if set.
returns:: CorpusDB object.

INSTANCEMETHODS::

METHOD:: initCorpus
Set up data structues, build synths, set corpus variables.
argument:: corpusAnchor
Symbol: a symbol that is a sort of key for the corpus.
argument:: srvr
argument:: verbose

METHOD:: buildSynths
Internal; builds and loads Synthdefs.

METHOD:: addSynthDef
Add your own Synthdef to the corpus. (These are in addition to the ones automatically generated by buildSynths.) Creates a two-way mapping between symbols and synthdefs.
argument:: symbol
String or Symbol.
argument:: synthdef
String or Symbol.
argument:: verbose
Flag: Spits out additional information if set.

METHOD:: addSoundFile
Adds a sound file to the corpus. No analysis or segmentation is performed.
argument:: path
String: Many operations rely on the path as the key reference to the sound file.
argument:: numChannels
Int: 1=mono, 2=stereo.
argument:: sfGrpID
Artificial grouping of sound files or units. (Phasing out?)
argument:: importFlag
Flag: Call import function if set.
argument:: srcFileID
Int: If you are adding a child sound file, this is where you link the parent.
argument:: synthdefs
List: The Synthdef(s) that create the sound file.
argument:: params
List: Sublists contain params for each Synthdef.
argument:: tratio
Float: Transposition ratio. Many functions need to know this value as it impacts many basic calculations.
argument:: verbose
returns:: Int: the added sfid.

METHOD:: importSoundFileToBuffer
Performs the actual import of the sound data to a buffer.
argument:: path
argument:: sfid
Int: This is where an ID number/index is assigned to a sound file.
argument:: verbose
returns:: Nil, if unsuccessful.

METHOD:: removeSoundFile
Removes metadata and frees the buffer. Further references using this path or associated sfid will return nil or do nothing.
argument:: path
argument:: verbose

METHOD:: addTransformation
(Phasing out)

METHOD:: analyzeSoundFile
Analyze the sound file and store the reultant metadata as raw (unsegmented).
argument:: path
argument:: group
argument:: sfid
argument:: analyze
Flag: If false, will perform only a dry-run of the analysis, which populates some important data structures. (This should be fixed/phased out soon.)
argument:: tratio
argument:: verbose


METHOD:: mapIDToSF
Performs mapping of sfid to sf's path. Uses a simple method to ensure that assignments are unique. (Hint: involves addition and the number 1.)
argument:: path
argument:: sfgrp
You have the opportunity to change grouping here, which might be rather convenient.
argument:: customMap
Substitute your own sfid. Do so at your own risk. No, but seriously, it should be fine; just something that hasn't been really tested.
argument:: verbose


METHOD:: addSoundFileUnit
Add a unit to the sound file units table. Segmentation is not actually performed here.
argument:: path
argument:: relid
Int: Index relative to the sound file. Reordering must be handled in the caller, likely the segmentation algorithm. (Expect this to be cleaned up.)
argument:: bounds
List of two elements: [onset, duration] in seconds. The most important bits; delineates the temoral boundaries and effectively defines the segment.
argument:: cid
Add the corpus-relative ID. (This definitely will be phased out. Do not use this).
argument:: sfg
A.K.A. SfGrpID.
argument:: tratio
argument:: sfid
argument:: verbose
returns:: Int: size of the created keys entry (should be 7).

METHOD:: updateSoundFileUnit
Update a previously created unit in the sound file units table.
argument:: path
argument:: relid
argument:: cid
Add the corpus-relative ID. (This definitely will be phased out. Do not use this. Maybe there was a reason that I did this, but I forget.).
argument:: onset
Update the start time of the segment.
argument:: dur
Update the duration of the segment.
argument:: mfccs
A reference to mfcc data. Should be nil in 99% of cases, signalling the method to read the data from the internal raw table.
argument:: sfg
argument:: keypair
(Phased out.)
argument:: verbose

METHOD:: removeSoundFileUnit
Delete a previously created unit in the sound file units table.
argument:: path
argument:: relid
argument:: verbose
returns:: Int: size of the updated sound file unit table or nil if there was an error removing.

METHOD:: clearSoundFileUnits
Delete all the previously created units in the sound file units table.
argument:: path
argument:: verbose

METHOD:: addRawMetadata
Function that adds raw data to the raw table. Should only be used internally.
argument:: path
argument:: mels
argument:: verbose

METHOD:: addRawMetadataUnit
Function that adds raw data to the raw table FOR A PARTICULAR SOUND FILE UNIT. Should only be used internally.
argument:: path
argument:: mels
The raw MFCC data.
argument:: verbose

METHOD:: gatherKeys
Import function uses this method to organize keys (first 7 columns in each corpus unit row.

METHOD:: segmentUnits
This function performs the actual segmentaiton. It has to be set up by adding sound files, analyzing, and adding sound file units.

METHOD:: addCorpusUnit
Map a corpus unit index to a row of metadata.
argument:: uid
argument:: metadata
A single row of metadata.
argument:: verbose

METHOD:: removeCorpusUnit
Remove a single mapped corpus unit.
argument:: uid
argument:: verbose

METHOD:: clearCorpusUnits
Removes all entries from the corpus unit table.

METHOD:: getSoundFileUnitMetadata
Collects and returns the metadata for the corpus units corresponding to the supplied metadata. Filter by sfid, corpus unit id, group id, or some combination of the three. See, there is a use for group ids.
argument:: sfid
argument:: uid
argument:: grpid
argument:: verbose
returns:: Filtered corpus units.

METHOD:: mapSoundFileUnitsToCorpusUnits
argument:: override
Doesn't do anything. Should be phased out.
argument:: verbose
returns:: The coprus unit table (cutable) after building it.

METHOD:: mapBySFRelID
Maps sound file ids to Dictionaries of corpus-unit id -> metadata mappings. Used internally.
argument:: verbose
returns:: The mapping.

METHOD:: importCorpusFromXML
Loads a corpus from an XML representation. Soon to be replaced by JSON.
argument:: server
(Phasing out server refs as args)
argument:: path
argument:: verbose

METHOD:: exportCorpusToXML
Saves a corpus as an XML representation. Soon to be replaced by JSON.
argument:: server
(Phasing out server refs as args)
argument:: path
argument:: verbose
