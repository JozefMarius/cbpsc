{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs20 \cf2 //This file is part of cbpsc (version 0.1.2).\cf0 \
\cf2 //\cf0 \
\cf2 //cbpsc is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\cf0 \
\cf2 //\cf0 \
\cf2 //cbpsc is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\cf0 \
\cf2 //\cf0 \
\cf2 //You should have received a copy of the GNU General Public License along with cbpsc.  If not, see <http://www.gnu.org/licenses/>.\cf0 \
\cf2 //\cf0 \
\cf2 // cbpsc : created by Thomas Stoll : tms@corpora-sonorus.com : www.corpora-sonorus.com\cf0 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf2 //\cf0 \
\cf2 // Copyright 2010, Thomas Stoll\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 Server\cf0 .default = \cf3 Server\cf0 .internal;\
s = \cf3 Server\cf0 .default.boot;\
\
~mycorpus = \cf3 CorpusDB\cf0 .new(\cf4 \\mycorpus\cf0 , s);\
\
\cf2 // a variable that holds a path to some sound file:\cf0 \
~soundfile = \cf5 "/some/path/to/a/soundfile.aif"\cf0 \
\cf2 // add it to the corpus database\cf0 \
~mycorpus.addSoundfile(~soundfile);\
\cf2 // and the corresponding remove method\cf0 \
~mycorpus.removeSoundfile(~soundfile);\
\
\cf2 // perform the analysis (note: for extremely long files (> 2-3 minutes) SC might hang and show the 'spinning wheel of death'...it should not hang for too long...if you have to force-quit, please do complain to the author!)\cf0 \
~mycorpus.analyzeSoundFile(~soundfile);\
\
\cf2 // add a (provisional) unit\cf0 \
\cf2 // args: the path, an integer id/index (relative to that file),\cf0 \
\cf2 //      and the bounds (in milliseconds) of this new unit\cf0 \
~mycorpus.addSoundFileUnit(~soundfile, 0, [0, 1000]);\
\
\cf2 //~mycorpus.addRawMetadata(~soundfile, [], [])...needs to be internal!\cf0 \
\
\cf2 // given at least one unit that has been established by .addSoundFileUnit,\cf0 \
\cf2 // this function segments the metadata and stores it in the right places\cf0 \
~mycorpus.segmentUnits(~soundfile);\
\
\
\cf2 // get the metadata for one unit by supplying the sound file id and the relative id\cf0 \
\cf2 // (this actually creates a corpus unit table where the units are indexed by corpus-level\cf0 \
\cf2 // indexes and searches that)\cf0 \
~mycorpus.getSoundFileUnitMetadata(0,1);\
\cf2 // get the meta data for one unit by supplying the corpus id\cf0 \
\cf2 // (also creates/uses the (same) corpus unit table)\cf0 \
~mycorpus.getCorpusUnitMetadata(6);\
\
\
\cf2 // import and export ... will work 100% in version 0.1.3!\cf0 \
~mycorpus.importCorpusFromXML(\cf5 "/some/file/path.xml"\cf0 );\
~mycorpus.exportCorpusToXML(\cf5 "/some/file/path.xml"\cf0 );}