{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;}
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs20 \cf2 //This file is part of cbpsc (last revision @ version 0.1.3).\cf3 \
\cf2 //\cf3 \
\cf2 //cbpsc is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\cf3 \
\cf2 //\cf3 \
\cf2 //cbpsc is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\cf3 \
\cf2 //\cf3 \
\cf2 //You should have received a copy of the GNU General Public License along with cbpsc.  If not, see <http://www.gnu.org/licenses/>.\cf3 \
\cf2 //\cf3 \
\cf2 // cbpsc : created by Thomas Stoll : tms@corpora-sonorus.com : www.corpora-sonorus.com\cf3 \
\pard\pardeftab560\li1140\fi-1140\ql\qnatural
\cf2 //\cf3 \
\cf2 // Copyright 2010, Thomas Stoll\cf3 \
\
\cf2 // Set up an internal server.\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf4 Server\cf3 .default = \cf4 Server\cf3 .internal;\
s = \cf4 Server\cf3 .default.boot;\
\
\cf2 // Define a new corpus with a path and a server: the path will help determine file names later on.\cf3 \
\cf2 // Each corpus ideally has its own directory. Each corpus directory should have a 'snd' subfolder.\cf3 \
~mycorpus = \cf4 CorpusDB\cf3 .new(\cf5 "/Users/me/folder/where/the/corpus/is/to/be/stored"\cf3 , s);\
\
\cf2 // A variable that holds a path to some sound file:\cf3 \
~soundfile = \cf5 "/some/path/to/a/soundfile.aif"\cf3 \
\cf2 //ideally:\cf3 \
~soundfile = \cf5 "/Users/me/folder/where/the/corpus/is/to/be/stored/snd/soundfile.aif"\cf3 \
\cf2 // but the sound files can live anywhere on your drive.\cf3 \
\
\cf2 // Add the sound file to the corpus database.\cf3 \
~mycorpus.addSoundfile(~soundfile);\
\cf2 // (the corresponding remove method)\cf3 \
~mycorpus.removeSoundfile(~soundfile);\
\
\cf2 // Perform the analysis. (note: for extremely long files (> 2-3 minutes) SC might hang and show the 'spinning wheel of death'...it should not hang for too long...if you have to force-quit, please do complain to the author!)\cf3 \
~mycorpus.analyzeSoundFile(~soundfile);\
\
\cf2 // Add a unit (a SoundFile Unit or 'a unit relative to a sound file')\cf3 \
\cf2 // args: the path, an integer id/index (relative to that file),\cf3 \
\cf2 //      and the bounds (in milliseconds) of this new unit\cf3 \
~mycorpus.addSoundFileUnit(~soundfile, 0, [0, 1000]);\
\
\cf2 // Given at least one unit that has been established by .addSoundFileUnit, this function segments the metadata and stores it in the right places.\cf3 \
~mycorpus.segmentUnits(~soundfile);\
\cf2 // Note that this has to be called for every sound file that is to be segmented into units.\cf3 \
\
\cf2 // Get the metadata for one unit by supplying the sound file id and the (sound-file-)relative id.\cf3 \
\cf2 // (Internally, this actually creates a corpus unit table where the units are indexed by corpus-level\cf3 \
\cf2 // indexes and searches that.)\cf3 \
~mycorpus.getSoundFileUnitMetadata(0,1);\
\cf2 // Get the meta data for one unit by supplying the corpus id (also creates/uses the (same) corpus unit table).\cf3 \
~mycorpus.getCorpusUnitMetadata(6);\
\
\
\cf2 // import and export ...\cf3 \
~mycorpus.importCorpusFromXML(\cf5 "/some/file/path.xml"\cf3 );\
~mycorpus.exportCorpusToXML(\cf5 "/some/file/path.xml"\cf3 );}